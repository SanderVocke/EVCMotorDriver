
EVCMotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000732  000007c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  00800062  00800062  000007c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000704  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020d  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00001189  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000060f  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_1>
   8:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 31       	cpi	r26, 0x12	; 18
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  8a:	0c 94 97 03 	jmp	0x72e	; 0x72e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setMotorDirection>:
		break;
	}
}

void setMotorDirection(motor_t motor, direction_t direction){
	switch(motor){
  92:	88 23       	and	r24, r24
  94:	19 f0       	breq	.+6      	; 0x9c <setMotorDirection+0xa>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	39 f0       	breq	.+14     	; 0xa8 <setMotorDirection+0x16>
  9a:	08 95       	ret
		case LEFT_MOTOR:
		if(direction==FORWARD) PORTA |= 0b00000001;
  9c:	61 11       	cpse	r22, r1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <setMotorDirection+0x12>
  a0:	d8 9a       	sbi	0x1b, 0	; 27
  a2:	08 95       	ret
		else PORTA &= 0b11111110;
  a4:	d8 98       	cbi	0x1b, 0	; 27
  a6:	08 95       	ret
		break;
		case RIGHT_MOTOR:
		if(direction==FORWARD) PORTA &= 0b11111101;
  a8:	61 11       	cpse	r22, r1
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <setMotorDirection+0x1e>
  ac:	d9 98       	cbi	0x1b, 1	; 27
  ae:	08 95       	ret
		else PORTA |= 0b00000010;
  b0:	d9 9a       	sbi	0x1b, 1	; 27
  b2:	08 95       	ret

000000b4 <init>:
	//Init I/O pins
	
	/* Port A:
	- pins 0 and 1: direction outputs to motor controller (CW/CCW).
	*/
	DDRA |= 0b00000011;
  b4:	8a b3       	in	r24, 0x1a	; 26
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	8a bb       	out	0x1a, r24	; 26
	
	/* Port D:
	- pins 4 and 5: PWM outputs to motor controller.
	- pins 2 and 3: PWM (interrupt) inputs from angle sensors.
	*/
	DDRD |= 0b00110000;
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	80 63       	ori	r24, 0x30	; 48
  be:	81 bb       	out	0x11, r24	; 17
	
	//Init Motor Parameters
	setMotorDirection(LEFT_MOTOR, FORWARD);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <setMotorDirection>
	setMotorDirection(RIGHT_MOTOR, FORWARD);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 49 00 	call	0x92	; 0x92 <setMotorDirection>
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
  d0:	10 92 73 00 	sts	0x0073, r1
		OCR1A = 255-duty;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	9b bd       	out	0x2b, r25	; 43
  da:	8a bd       	out	0x2a, r24	; 42
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
  dc:	10 92 72 00 	sts	0x0072, r1
		OCR1B =255-duty;
  e0:	99 bd       	out	0x29, r25	; 41
  e2:	88 bd       	out	0x28, r24	; 40
}

void setMotorSpeed(motor_t motor, uint8_t speed){
	switch(motor){
		case LEFT_MOTOR:
		t_speed_left = speed;
  e4:	10 92 77 00 	sts	0x0077, r1
		break;
		case RIGHT_MOTOR:
		t_speed_right = speed;
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	80 93 76 00 	sts	0x0076, r24
	setMotorSpeed(RIGHT_MOTOR, 100);
#endif
	
	//Init Timers	
	//Timer/Counter1: For 100kHz PWM to motor driver.
	TCCR1A = 0b11110001; //Fast PWM mode, inverting
  ee:	81 ef       	ldi	r24, 0xF1	; 241
  f0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001001; //Fast PWM mode, system clock source	
  f2:	89 e0       	ldi	r24, 0x09	; 9
  f4:	8e bd       	out	0x2e, r24	; 46
	
	//Init I2C slave mode
	TWAR = (I2C_SLAVE_ADDR<<1)|1; //slave addr (bits 7-1) and respond to general call
  f6:	87 e1       	ldi	r24, 0x17	; 23
  f8:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWIE); //slave mode config
  fa:	85 e4       	ldi	r24, 0x45	; 69
  fc:	86 bf       	out	0x36, r24	; 54
	
#ifndef OPEN_LOOP_CONTROL //if doing PID
	//Init external interrupts (PWM inputs)
	MCUCR |= 0b00000101; //any edge causes interrupt
  fe:	85 b7       	in	r24, 0x35	; 53
 100:	85 60       	ori	r24, 0x05	; 5
 102:	85 bf       	out	0x35, r24	; 53
	GICR |= 0b11000000; //enable INTO and INT1
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	80 6c       	ori	r24, 0xC0	; 192
 108:	8b bf       	out	0x3b, r24	; 59
	TCNT0 = 0; //reset timer 0 (right wheel)
 10a:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0b00000010; //clk/8 = almost 500Hz overflow rate for the timer that times PWM. Starts timer.	
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000001; //enable overflow interrupt
 110:	89 b7       	in	r24, 0x39	; 57
 112:	81 60       	ori	r24, 0x01	; 1
 114:	89 bf       	out	0x39, r24	; 57
#endif
	
	//global interrupts
	sei();
 116:	78 94       	sei
 118:	08 95       	ret

0000011a <processI2CByte>:
}

void processI2CByte(){
	uint8_t byte = TWDR;
 11a:	93 b1       	in	r25, 0x03	; 3
	//first byte: selects motor and direction.	
	if(i2c_r_index==0){
 11c:	80 91 71 00 	lds	r24, 0x0071
 120:	81 11       	cpse	r24, r1
 122:	0c c0       	rjmp	.+24     	; 0x13c <processI2CByte+0x22>
		i2c_motor = (byte & MOTOR_BIT) ? LEFT_MOTOR : RIGHT_MOTOR;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	91 fb       	bst	r25, 1
 128:	22 27       	eor	r18, r18
 12a:	20 f9       	bld	r18, 0
 12c:	28 27       	eor	r18, r24
 12e:	20 93 6b 00 	sts	0x006B, r18
		i2c_direction = (byte & DIRECTION_BIT) ? FORWARD : BACKWARD;		
 132:	98 27       	eor	r25, r24
 134:	91 70       	andi	r25, 0x01	; 1
 136:	90 93 6a 00 	sts	0x006A, r25
 13a:	08 95       	ret
	}
	else if(i2c_r_index==1){
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	31 f4       	brne	.+12     	; 0x14c <processI2CByte+0x32>
		setMotorDirection(i2c_motor, i2c_direction);
 140:	60 91 6a 00 	lds	r22, 0x006A
 144:	80 91 6b 00 	lds	r24, 0x006B
 148:	0e 94 49 00 	call	0x92	; 0x92 <setMotorDirection>
 14c:	08 95       	ret

0000014e <doPID>:
int32_t I_right = 0;
#define P_GAIN 500 //of 1000
#define I_GAIN 50 //of 1000
#define I_CAP 1000
int32_t error, newSpeed;
void doPID(){
 14e:	8f 92       	push	r8
 150:	9f 92       	push	r9
 152:	af 92       	push	r10
 154:	bf 92       	push	r11
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
	error = (int32_t)t_speed_left - (int32_t)speed_left;
 15e:	20 91 77 00 	lds	r18, 0x0077
 162:	42 2f       	mov	r20, r18
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 91 75 00 	lds	r24, 0x0075
 16e:	9a 01       	movw	r18, r20
 170:	ab 01       	movw	r20, r22
 172:	28 1b       	sub	r18, r24
 174:	31 09       	sbc	r19, r1
 176:	41 09       	sbc	r20, r1
 178:	51 09       	sbc	r21, r1
	I_left += error;
 17a:	80 91 66 00 	lds	r24, 0x0066
 17e:	90 91 67 00 	lds	r25, 0x0067
 182:	a0 91 68 00 	lds	r26, 0x0068
 186:	b0 91 69 00 	lds	r27, 0x0069
 18a:	82 0f       	add	r24, r18
 18c:	93 1f       	adc	r25, r19
 18e:	a4 1f       	adc	r26, r20
 190:	b5 1f       	adc	r27, r21
	if(I_left < (-I_CAP)) I_left = -I_CAP;
 192:	88 31       	cpi	r24, 0x18	; 24
 194:	6c ef       	ldi	r22, 0xFC	; 252
 196:	96 07       	cpc	r25, r22
 198:	6f ef       	ldi	r22, 0xFF	; 255
 19a:	a6 07       	cpc	r26, r22
 19c:	b6 07       	cpc	r27, r22
 19e:	4c f0       	brlt	.+18     	; 0x1b2 <doPID+0x64>
#define I_GAIN 50 //of 1000
#define I_CAP 1000
int32_t error, newSpeed;
void doPID(){
	error = (int32_t)t_speed_left - (int32_t)speed_left;
	I_left += error;
 1a0:	80 93 66 00 	sts	0x0066, r24
 1a4:	90 93 67 00 	sts	0x0067, r25
 1a8:	a0 93 68 00 	sts	0x0068, r26
 1ac:	b0 93 69 00 	sts	0x0069, r27
 1b0:	0c c0       	rjmp	.+24     	; 0x1ca <doPID+0x7c>
	if(I_left < (-I_CAP)) I_left = -I_CAP;
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	9c ef       	ldi	r25, 0xFC	; 252
 1b6:	af ef       	ldi	r26, 0xFF	; 255
 1b8:	bf ef       	ldi	r27, 0xFF	; 255
 1ba:	80 93 66 00 	sts	0x0066, r24
 1be:	90 93 67 00 	sts	0x0067, r25
 1c2:	a0 93 68 00 	sts	0x0068, r26
 1c6:	b0 93 69 00 	sts	0x0069, r27
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 1ca:	88 e7       	ldi	r24, 0x78	; 120
 1cc:	80 93 73 00 	sts	0x0073, r24
		OCR1A = 255-duty;
 1d0:	87 e8       	ldi	r24, 0x87	; 135
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	9b bd       	out	0x2b, r25	; 43
 1d6:	8a bd       	out	0x2a, r24	; 42
	if(newSpeed < 0) newSpeed = 0;
	if(newSpeed > 255) newSpeed = 255;
	//setMotorDuty(LEFT_MOTOR, (uint8_t)newSpeed);
	setMotorDuty(LEFT_MOTOR, 120);
	
	error = (int32_t)t_speed_right - (int32_t)speed_right;
 1d8:	20 91 76 00 	lds	r18, 0x0076
 1dc:	42 2f       	mov	r20, r18
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 91 74 00 	lds	r24, 0x0074
 1e8:	9a 01       	movw	r18, r20
 1ea:	ab 01       	movw	r20, r22
 1ec:	28 1b       	sub	r18, r24
 1ee:	31 09       	sbc	r19, r1
 1f0:	41 09       	sbc	r20, r1
 1f2:	51 09       	sbc	r21, r1
 1f4:	20 93 0e 01 	sts	0x010E, r18
 1f8:	30 93 0f 01 	sts	0x010F, r19
 1fc:	40 93 10 01 	sts	0x0110, r20
 200:	50 93 11 01 	sts	0x0111, r21
	I_right += error;
 204:	80 91 62 00 	lds	r24, 0x0062
 208:	90 91 63 00 	lds	r25, 0x0063
 20c:	a0 91 64 00 	lds	r26, 0x0064
 210:	b0 91 65 00 	lds	r27, 0x0065
 214:	82 0f       	add	r24, r18
 216:	93 1f       	adc	r25, r19
 218:	a4 1f       	adc	r26, r20
 21a:	b5 1f       	adc	r27, r21
 21c:	80 93 62 00 	sts	0x0062, r24
 220:	90 93 63 00 	sts	0x0063, r25
 224:	a0 93 64 00 	sts	0x0064, r26
 228:	b0 93 65 00 	sts	0x0065, r27
	if(I_right > I_CAP) I_right = I_CAP;
 22c:	89 3e       	cpi	r24, 0xE9	; 233
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	96 07       	cpc	r25, r22
 232:	a1 05       	cpc	r26, r1
 234:	b1 05       	cpc	r27, r1
 236:	6c f0       	brlt	.+26     	; 0x252 <doPID+0x104>
 238:	88 ee       	ldi	r24, 0xE8	; 232
 23a:	93 e0       	ldi	r25, 0x03	; 3
 23c:	a0 e0       	ldi	r26, 0x00	; 0
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	80 93 62 00 	sts	0x0062, r24
 244:	90 93 63 00 	sts	0x0063, r25
 248:	a0 93 64 00 	sts	0x0064, r26
 24c:	b0 93 65 00 	sts	0x0065, r27
 250:	11 c0       	rjmp	.+34     	; 0x274 <doPID+0x126>
	if(I_right < (-I_CAP)) I_right = -I_CAP;
 252:	88 31       	cpi	r24, 0x18	; 24
 254:	9c 4f       	sbci	r25, 0xFC	; 252
 256:	af 4f       	sbci	r26, 0xFF	; 255
 258:	bf 4f       	sbci	r27, 0xFF	; 255
 25a:	64 f4       	brge	.+24     	; 0x274 <doPID+0x126>
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	9c ef       	ldi	r25, 0xFC	; 252
 260:	af ef       	ldi	r26, 0xFF	; 255
 262:	bf ef       	ldi	r27, 0xFF	; 255
 264:	80 93 62 00 	sts	0x0062, r24
 268:	90 93 63 00 	sts	0x0063, r25
 26c:	a0 93 64 00 	sts	0x0064, r26
 270:	b0 93 65 00 	sts	0x0065, r27
	newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_right)/1000 + (int16_t)getMotorDuty(RIGHT_MOTOR);
 274:	a4 ef       	ldi	r26, 0xF4	; 244
 276:	b1 e0       	ldi	r27, 0x01	; 1
 278:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__muluhisi3>
 27c:	0f 2e       	mov	r0, r31
 27e:	f8 ee       	ldi	r31, 0xE8	; 232
 280:	cf 2e       	mov	r12, r31
 282:	f3 e0       	ldi	r31, 0x03	; 3
 284:	df 2e       	mov	r13, r31
 286:	e1 2c       	mov	r14, r1
 288:	f1 2c       	mov	r15, r1
 28a:	f0 2d       	mov	r31, r0
 28c:	a7 01       	movw	r20, r14
 28e:	96 01       	movw	r18, r12
 290:	0e 94 3c 03 	call	0x678	; 0x678 <__divmodsi4>
 294:	49 01       	movw	r8, r18
 296:	5a 01       	movw	r10, r20
 298:	20 91 62 00 	lds	r18, 0x0062
 29c:	30 91 63 00 	lds	r19, 0x0063
 2a0:	40 91 64 00 	lds	r20, 0x0064
 2a4:	50 91 65 00 	lds	r21, 0x0065
 2a8:	a2 e3       	ldi	r26, 0x32	; 50
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__muluhisi3>
 2b0:	a7 01       	movw	r20, r14
 2b2:	96 01       	movw	r18, r12
 2b4:	0e 94 3c 03 	call	0x678	; 0x678 <__divmodsi4>
 2b8:	d5 01       	movw	r26, r10
 2ba:	c4 01       	movw	r24, r8
 2bc:	82 0f       	add	r24, r18
 2be:	93 1f       	adc	r25, r19
 2c0:	a4 1f       	adc	r26, r20
 2c2:	b5 1f       	adc	r27, r21
 2c4:	20 91 72 00 	lds	r18, 0x0072
 2c8:	82 0f       	add	r24, r18
 2ca:	91 1d       	adc	r25, r1
 2cc:	a1 1d       	adc	r26, r1
 2ce:	b1 1d       	adc	r27, r1
 2d0:	80 93 84 00 	sts	0x0084, r24
 2d4:	90 93 85 00 	sts	0x0085, r25
 2d8:	a0 93 86 00 	sts	0x0086, r26
 2dc:	b0 93 87 00 	sts	0x0087, r27
	if(newSpeed < 0) newSpeed = 0;
 2e0:	bb 23       	and	r27, r27
 2e2:	4c f4       	brge	.+18     	; 0x2f6 <doPID+0x1a8>
 2e4:	10 92 84 00 	sts	0x0084, r1
 2e8:	10 92 85 00 	sts	0x0085, r1
 2ec:	10 92 86 00 	sts	0x0086, r1
 2f0:	10 92 87 00 	sts	0x0087, r1
 2f4:	12 c0       	rjmp	.+36     	; 0x31a <doPID+0x1cc>
	if(newSpeed > 255) newSpeed = 255;
 2f6:	8f 3f       	cpi	r24, 0xFF	; 255
 2f8:	91 05       	cpc	r25, r1
 2fa:	a1 05       	cpc	r26, r1
 2fc:	b1 05       	cpc	r27, r1
 2fe:	69 f0       	breq	.+26     	; 0x31a <doPID+0x1cc>
 300:	64 f0       	brlt	.+24     	; 0x31a <doPID+0x1cc>
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	a0 e0       	ldi	r26, 0x00	; 0
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	80 93 84 00 	sts	0x0084, r24
 30e:	90 93 85 00 	sts	0x0085, r25
 312:	a0 93 86 00 	sts	0x0086, r26
 316:	b0 93 87 00 	sts	0x0087, r27
	setMotorDuty(RIGHT_MOTOR, (uint8_t)newSpeed);
 31a:	20 91 84 00 	lds	r18, 0x0084
		case LEFT_MOTOR:
		duty_left = duty;
		OCR1A = 255-duty;
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 31e:	20 93 72 00 	sts	0x0072, r18
		OCR1B =255-duty;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	82 1b       	sub	r24, r18
 328:	91 09       	sbc	r25, r1
 32a:	99 bd       	out	0x29, r25	; 41
 32c:	88 bd       	out	0x28, r24	; 40
	if(newSpeed < 0) newSpeed = 0;
	if(newSpeed > 255) newSpeed = 255;
	setMotorDuty(RIGHT_MOTOR, (uint8_t)newSpeed);
	//setMotorDuty(RIGHT_MOTOR, 255);
	return;	
}
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	bf 90       	pop	r11
 338:	af 90       	pop	r10
 33a:	9f 90       	pop	r9
 33c:	8f 90       	pop	r8
 33e:	08 95       	ret

00000340 <updateSpeed>:

//function that updates speed
void updateSpeed(void){	
	if(!doUpdate) return;
 340:	80 91 79 00 	lds	r24, 0x0079
 344:	88 23       	and	r24, r24
 346:	a1 f1       	breq	.+104    	; 0x3b0 <updateSpeed+0x70>
	doUpdate = 0;
 348:	10 92 79 00 	sts	0x0079, r1
	uint16_t speed16r = 10*ticks_right;
 34c:	80 91 7b 00 	lds	r24, 0x007B
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	9c 01       	movw	r18, r24
 354:	22 0f       	add	r18, r18
 356:	33 1f       	adc	r19, r19
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	28 0f       	add	r18, r24
 366:	39 1f       	adc	r19, r25
 368:	82 2f       	mov	r24, r18
 36a:	93 2f       	mov	r25, r19
	uint16_t speed16l = 10*ticks_left;
 36c:	40 91 7a 00 	lds	r20, 0x007A
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	ba 01       	movw	r22, r20
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	44 0f       	add	r20, r20
 37a:	55 1f       	adc	r21, r21
 37c:	44 0f       	add	r20, r20
 37e:	55 1f       	adc	r21, r21
 380:	44 0f       	add	r20, r20
 382:	55 1f       	adc	r21, r21
 384:	46 0f       	add	r20, r22
 386:	57 1f       	adc	r21, r23
	ticks_right = 0;
 388:	10 92 7b 00 	sts	0x007B, r1
	ticks_left = 0;
 38c:	10 92 7a 00 	sts	0x007A, r1
	speed_left = (speed16l > 255)?255:(uint8_t)speed16l;
 390:	4f 3f       	cpi	r20, 0xFF	; 255
 392:	51 05       	cpc	r21, r1
 394:	11 f0       	breq	.+4      	; 0x39a <updateSpeed+0x5a>
 396:	08 f0       	brcs	.+2      	; 0x39a <updateSpeed+0x5a>
 398:	4f ef       	ldi	r20, 0xFF	; 255
 39a:	40 93 75 00 	sts	0x0075, r20
	speed_right = (speed16r > 255)?255:(uint8_t)speed16r;	
 39e:	8f 3f       	cpi	r24, 0xFF	; 255
 3a0:	91 05       	cpc	r25, r1
 3a2:	11 f0       	breq	.+4      	; 0x3a8 <updateSpeed+0x68>
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <updateSpeed+0x68>
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	20 93 74 00 	sts	0x0074, r18
	doPID();
 3ac:	0e 94 a7 00 	call	0x14e	; 0x14e <doPID>
 3b0:	08 95       	ret

000003b2 <main>:
void updateSpeed(void);
void init(void);

int main(void)
{	
	init();
 3b2:	0e 94 5a 00 	call	0xb4	; 0xb4 <init>
	
    while(1){
#ifndef OPEN_LOOP_CONTROL
		updateSpeed();
 3b6:	0e 94 a0 01 	call	0x340	; 0x340 <updateSpeed>
 3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <main+0x4>

000003bc <__vector_1>:
	speed_right = (speed16r > 255)?255:(uint8_t)speed16r;	
	doPID();
}

//interrupt handlers for external interrupts (get angle readings from motors)
ISR(INT0_vect){ //right motor
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
	uint8_t sreg_save = SREG;
 3de:	3f b7       	in	r19, 0x3f	; 63
	cli();
 3e0:	f8 94       	cli
	uint8_t current_value = TCNT0;
 3e2:	22 b7       	in	r18, 0x32	; 50
	if(PIND & 0b00000100){ //just went HIGH
 3e4:	82 9b       	sbis	0x10, 2	; 16
 3e6:	39 c0       	rjmp	.+114    	; 0x45a <__vector_1+0x9e>
		uint8_t temp = intref_right[1]-intref_right[0];
 3e8:	80 91 7f 00 	lds	r24, 0x007F
 3ec:	90 91 7e 00 	lds	r25, 0x007E
 3f0:	68 2f       	mov	r22, r24
 3f2:	69 1b       	sub	r22, r25
		uint8_t temp2 = current_value-intref_right[1];
		uint16_t temp4 = temp2+temp;
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	96 2f       	mov	r25, r22
	uint8_t sreg_save = SREG;
	cli();
	uint8_t current_value = TCNT0;
	if(PIND & 0b00000100){ //just went HIGH
		uint8_t temp = intref_right[1]-intref_right[0];
		uint8_t temp2 = current_value-intref_right[1];
 3f8:	42 2f       	mov	r20, r18
 3fa:	48 1b       	sub	r20, r24
		uint16_t temp4 = temp2+temp;
 3fc:	64 0f       	add	r22, r20
 3fe:	71 1d       	adc	r23, r1
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 28 03 	call	0x650	; 0x650 <__udivmodhi4>
 406:	86 2f       	mov	r24, r22
 408:	97 2f       	mov	r25, r23
		if(do_ticks){
 40a:	40 91 61 00 	lds	r20, 0x0061
 40e:	44 23       	and	r20, r20
 410:	79 f0       	breq	.+30     	; 0x430 <__vector_1+0x74>
			}
			else{
				if(((intref_right[2] - (uint8_t)temp3) > 50) && do_ticks) ticks_right++;
			}
			*/
			if(temp3 < 170 && lastangle_right > 170) ticks_right++;
 412:	8a 3a       	cpi	r24, 0xAA	; 170
 414:	91 05       	cpc	r25, r1
 416:	60 f4       	brcc	.+24     	; 0x430 <__vector_1+0x74>
 418:	80 91 7c 00 	lds	r24, 0x007C
 41c:	90 91 7d 00 	lds	r25, 0x007D
 420:	8b 3a       	cpi	r24, 0xAB	; 171
 422:	91 05       	cpc	r25, r1
 424:	28 f0       	brcs	.+10     	; 0x430 <__vector_1+0x74>
 426:	80 91 7b 00 	lds	r24, 0x007B
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	80 93 7b 00 	sts	0x007B, r24
		}		
		lastangle_right = temp3;
 430:	60 93 7c 00 	sts	0x007C, r22
 434:	70 93 7d 00 	sts	0x007D, r23
#ifdef STORE_ANGLES
		angles[i_angles%NUM_STORE_ANGLES] = lastangle_right;
 438:	80 91 78 00 	lds	r24, 0x0078
 43c:	e8 2f       	mov	r30, r24
 43e:	ef 73       	andi	r30, 0x3F	; 63
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	e8 57       	subi	r30, 0x78	; 120
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	60 83       	st	Z, r22
 44c:	71 83       	std	Z+1, r23	; 0x01
		i_angles++;
 44e:	8f 5f       	subi	r24, 0xFF	; 255
 450:	80 93 78 00 	sts	0x0078, r24
#endif
		intref_right[0] = current_value;
 454:	20 93 7e 00 	sts	0x007E, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <__vector_1+0xa2>
	}
	else{ //just went LOW
		intref_right[1] = current_value;
 45a:	20 93 7f 00 	sts	0x007F, r18
	}
	SREG = sreg_save;
 45e:	3f bf       	out	0x3f, r19	; 63
}
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_2>:
ISR(INT1_vect){ //left motor
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
	uint8_t sreg_save = SREG;
 4a0:	3f b7       	in	r19, 0x3f	; 63
	cli();
 4a2:	f8 94       	cli
	uint8_t current_value = TCNT0;
 4a4:	22 b7       	in	r18, 0x32	; 50
	if(PIND & 0b00000100){ //just went HIGH
 4a6:	82 9b       	sbis	0x10, 2	; 16
 4a8:	23 c0       	rjmp	.+70     	; 0x4f0 <__vector_2+0x6e>
		uint8_t temp = intref_left[1]-intref_left[0];
 4aa:	40 91 81 00 	lds	r20, 0x0081
 4ae:	80 91 82 00 	lds	r24, 0x0082
 4b2:	84 1b       	sub	r24, r20
		uint8_t temp2 = current_value-intref_left[1];
		temp2+=temp;
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp2;
 4b4:	98 2f       	mov	r25, r24
	cli();
	uint8_t current_value = TCNT0;
	if(PIND & 0b00000100){ //just went HIGH
		uint8_t temp = intref_left[1]-intref_left[0];
		uint8_t temp2 = current_value-intref_left[1];
		temp2+=temp;
 4b6:	62 2f       	mov	r22, r18
 4b8:	64 1b       	sub	r22, r20
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp2;
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 28 03 	call	0x650	; 0x650 <__udivmodhi4>
 4c2:	cb 01       	movw	r24, r22
 4c4:	99 27       	eor	r25, r25
		if((((uint8_t)temp3 - intref_left[2]) > 128) && do_ticks) ticks_left++;
 4c6:	40 91 83 00 	lds	r20, 0x0083
 4ca:	84 1b       	sub	r24, r20
 4cc:	91 09       	sbc	r25, r1
 4ce:	81 38       	cpi	r24, 0x81	; 129
 4d0:	91 05       	cpc	r25, r1
 4d2:	4c f0       	brlt	.+18     	; 0x4e6 <__vector_2+0x64>
 4d4:	80 91 61 00 	lds	r24, 0x0061
 4d8:	88 23       	and	r24, r24
 4da:	29 f0       	breq	.+10     	; 0x4e6 <__vector_2+0x64>
 4dc:	80 91 7a 00 	lds	r24, 0x007A
 4e0:	8f 5f       	subi	r24, 0xFF	; 255
 4e2:	80 93 7a 00 	sts	0x007A, r24
		intref_left[2] = (uint8_t)temp3;
 4e6:	60 93 83 00 	sts	0x0083, r22
		intref_left[0] = current_value;
 4ea:	20 93 81 00 	sts	0x0081, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__vector_2+0x72>
	}
	else{ //just went LOW
		intref_left[1] = current_value;
 4f0:	20 93 82 00 	sts	0x0082, r18
	}
	SREG = sreg_save;
 4f4:	3f bf       	out	0x3f, r19	; 63
}
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <__vector_11>:

//Overflow handler of timer 0 (500Hz)
ISR(TIMER0_OVF_vect){
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	8f 93       	push	r24
	if(prescaler) prescaler--;
 520:	80 91 60 00 	lds	r24, 0x0060
 524:	88 23       	and	r24, r24
 526:	21 f0       	breq	.+8      	; 0x530 <__vector_11+0x1c>
 528:	81 50       	subi	r24, 0x01	; 1
 52a:	80 93 60 00 	sts	0x0060, r24
 52e:	06 c0       	rjmp	.+12     	; 0x53c <__vector_11+0x28>
	else{
		prescaler = DIV_SPEED_TIMER;
 530:	88 e2       	ldi	r24, 0x28	; 40
 532:	80 93 60 00 	sts	0x0060, r24
		doUpdate = 1;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 79 00 	sts	0x0079, r24
	}	
}
 53c:	8f 91       	pop	r24
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <__vector_19>:

//interrupt handler for I2C slave operation
ISR(TWI_vect){	
 548:	1f 92       	push	r1
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	0f 92       	push	r0
 550:	11 24       	eor	r1, r1
 552:	2f 93       	push	r18
 554:	3f 93       	push	r19
 556:	4f 93       	push	r20
 558:	5f 93       	push	r21
 55a:	6f 93       	push	r22
 55c:	7f 93       	push	r23
 55e:	8f 93       	push	r24
 560:	9f 93       	push	r25
 562:	af 93       	push	r26
 564:	bf 93       	push	r27
 566:	cf 93       	push	r28
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	uint8_t sreg_save = SREG;
 56c:	cf b7       	in	r28, 0x3f	; 63
	cli();
 56e:	f8 94       	cli
	switch(TW_STATUS){
 570:	81 b1       	in	r24, 0x01	; 1
 572:	88 7f       	andi	r24, 0xF8	; 248
 574:	88 38       	cpi	r24, 0x88	; 136
 576:	a1 f1       	breq	.+104    	; 0x5e0 <__vector_19+0x98>
 578:	60 f4       	brcc	.+24     	; 0x592 <__vector_19+0x4a>
 57a:	80 36       	cpi	r24, 0x60	; 96
 57c:	b9 f0       	breq	.+46     	; 0x5ac <__vector_19+0x64>
 57e:	20 f4       	brcc	.+8      	; 0x588 <__vector_19+0x40>
 580:	88 23       	and	r24, r24
 582:	09 f4       	brne	.+2      	; 0x586 <__vector_19+0x3e>
 584:	50 c0       	rjmp	.+160    	; 0x626 <__vector_19+0xde>
 586:	51 c0       	rjmp	.+162    	; 0x62a <__vector_19+0xe2>
 588:	88 36       	cpi	r24, 0x68	; 104
 58a:	21 f1       	breq	.+72     	; 0x5d4 <__vector_19+0x8c>
 58c:	80 38       	cpi	r24, 0x80	; 128
 58e:	99 f0       	breq	.+38     	; 0x5b6 <__vector_19+0x6e>
 590:	4c c0       	rjmp	.+152    	; 0x62a <__vector_19+0xe2>
 592:	88 3b       	cpi	r24, 0xB8	; 184
 594:	89 f1       	breq	.+98     	; 0x5f8 <__vector_19+0xb0>
 596:	28 f4       	brcc	.+10     	; 0x5a2 <__vector_19+0x5a>
 598:	80 3a       	cpi	r24, 0xA0	; 160
 59a:	f9 f0       	breq	.+62     	; 0x5da <__vector_19+0x92>
 59c:	88 3a       	cpi	r24, 0xA8	; 168
 59e:	19 f1       	breq	.+70     	; 0x5e6 <__vector_19+0x9e>
 5a0:	44 c0       	rjmp	.+136    	; 0x62a <__vector_19+0xe2>
 5a2:	80 3c       	cpi	r24, 0xC0	; 192
 5a4:	e9 f1       	breq	.+122    	; 0x620 <__vector_19+0xd8>
 5a6:	88 3c       	cpi	r24, 0xC8	; 200
 5a8:	d9 f1       	breq	.+118    	; 0x620 <__vector_19+0xd8>
 5aa:	3f c0       	rjmp	.+126    	; 0x62a <__vector_19+0xe2>
		//--------------Slave receiver------------------------------------
		//SLA_W received and acked, prepare for data receiving
		case 0x60:
		TWACK;
 5ac:	85 ec       	ldi	r24, 0xC5	; 197
 5ae:	86 bf       	out	0x36, r24	; 54
		i2c_r_index = 0;
 5b0:	10 92 71 00 	sts	0x0071, r1
		break;
 5b4:	3a c0       	rjmp	.+116    	; 0x62a <__vector_19+0xe2>
		case 0x80:  //a byte was received, store it and
		//setup the buffer to recieve another
		//i2c_r[i2c_r_index] = TWDR;
		processI2CByte();
 5b6:	0e 94 8d 00 	call	0x11a	; 0x11a <processI2CByte>
		i2c_r_index++;
 5ba:	80 91 71 00 	lds	r24, 0x0071
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	80 93 71 00 	sts	0x0071, r24
		//don't ack next data if buffer is full
		if(i2c_r_index >= I2C_BUFSIZE_RECV){
 5c4:	86 30       	cpi	r24, 0x06	; 6
 5c6:	18 f0       	brcs	.+6      	; 0x5ce <__vector_19+0x86>
			TWNACK;
 5c8:	85 e8       	ldi	r24, 0x85	; 133
 5ca:	86 bf       	out	0x36, r24	; 54
 5cc:	2e c0       	rjmp	.+92     	; 0x62a <__vector_19+0xe2>
			}else {
			TWACK;
 5ce:	85 ec       	ldi	r24, 0xC5	; 197
 5d0:	86 bf       	out	0x36, r24	; 54
 5d2:	2b c0       	rjmp	.+86     	; 0x62a <__vector_19+0xe2>
		}
		break;
		case 0x68://adressed as slave while in master mode.
		//should never happen, better reset;
		i2c_rst=1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 70 00 	sts	0x0070, r24
		case 0xA0: //Stop or rep start, reset state machine
		TWACK;
 5da:	85 ec       	ldi	r24, 0xC5	; 197
 5dc:	86 bf       	out	0x36, r24	; 54
		break;
 5de:	25 c0       	rjmp	.+74     	; 0x62a <__vector_19+0xe2>
		//-------------- error recovery ----------------------------------
		case 0x88: //data received  but not acked
		//should not happen if the master is behaving as expected
		//switch to not adressed mode
		TWACK;
 5e0:	85 ec       	ldi	r24, 0xC5	; 197
 5e2:	86 bf       	out	0x36, r24	; 54
		break;
 5e4:	22 c0       	rjmp	.+68     	; 0x62a <__vector_19+0xe2>
		//---------------Slave Transmitter--------------------------------
		case 0xA8:  //SLA R received, prep for transmission
		//and load first data
		i2c_t_index=1;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	80 93 6f 00 	sts	0x006F, r24
		TWDR = i2c_t[0];
 5ec:	80 91 6c 00 	lds	r24, 0x006C
 5f0:	83 b9       	out	0x03, r24	; 3
		TWACK;
 5f2:	85 ec       	ldi	r24, 0xC5	; 197
 5f4:	86 bf       	out	0x36, r24	; 54
		break;
 5f6:	19 c0       	rjmp	.+50     	; 0x62a <__vector_19+0xe2>
		case 0xB8:  //data transmitted and acked by master, load next
		TWDR = i2c_t[i2c_t_index];
 5f8:	e0 91 6f 00 	lds	r30, 0x006F
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	e4 59       	subi	r30, 0x94	; 148
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	80 81       	ld	r24, Z
 604:	83 b9       	out	0x03, r24	; 3
		i2c_t_index++;
 606:	80 91 6f 00 	lds	r24, 0x006F
 60a:	8f 5f       	subi	r24, 0xFF	; 255
 60c:	80 93 6f 00 	sts	0x006F, r24
		//designate last byte if we're at the end of the buffer
		if(i2c_t_index >= I2C_BUFSIZE_TRAN) TWNACK;
 610:	83 30       	cpi	r24, 0x03	; 3
 612:	18 f0       	brcs	.+6      	; 0x61a <__vector_19+0xd2>
 614:	85 e8       	ldi	r24, 0x85	; 133
 616:	86 bf       	out	0x36, r24	; 54
 618:	08 c0       	rjmp	.+16     	; 0x62a <__vector_19+0xe2>
		else TWACK;
 61a:	85 ec       	ldi	r24, 0xC5	; 197
 61c:	86 bf       	out	0x36, r24	; 54
 61e:	05 c0       	rjmp	.+10     	; 0x62a <__vector_19+0xe2>
		case 0xC8: //last byte send and acked by master
		//last bytes should not be acked, ignore till start/stop
		//reset=1;
		case 0xC0: //last byte send and nacked by master
		//(as should be)
		TWACK;
 620:	85 ec       	ldi	r24, 0xC5	; 197
 622:	86 bf       	out	0x36, r24	; 54
		break;
 624:	02 c0       	rjmp	.+4      	; 0x62a <__vector_19+0xe2>
		//--------------------- bus error---------------------------------
		//illegal start or stop received, reset the I2C hardware
		case 0x00:
		TWRESET;
 626:	85 ed       	ldi	r24, 0xD5	; 213
 628:	86 bf       	out	0x36, r24	; 54
		break;
	}
	SREG = sreg_save;
 62a:	cf bf       	out	0x3f, r28	; 63
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	cf 91       	pop	r28
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__udivmodhi4>:
 650:	aa 1b       	sub	r26, r26
 652:	bb 1b       	sub	r27, r27
 654:	51 e1       	ldi	r21, 0x11	; 17
 656:	07 c0       	rjmp	.+14     	; 0x666 <__udivmodhi4_ep>

00000658 <__udivmodhi4_loop>:
 658:	aa 1f       	adc	r26, r26
 65a:	bb 1f       	adc	r27, r27
 65c:	a6 17       	cp	r26, r22
 65e:	b7 07       	cpc	r27, r23
 660:	10 f0       	brcs	.+4      	; 0x666 <__udivmodhi4_ep>
 662:	a6 1b       	sub	r26, r22
 664:	b7 0b       	sbc	r27, r23

00000666 <__udivmodhi4_ep>:
 666:	88 1f       	adc	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	5a 95       	dec	r21
 66c:	a9 f7       	brne	.-22     	; 0x658 <__udivmodhi4_loop>
 66e:	80 95       	com	r24
 670:	90 95       	com	r25
 672:	bc 01       	movw	r22, r24
 674:	cd 01       	movw	r24, r26
 676:	08 95       	ret

00000678 <__divmodsi4>:
 678:	05 2e       	mov	r0, r21
 67a:	97 fb       	bst	r25, 7
 67c:	1e f4       	brtc	.+6      	; 0x684 <__divmodsi4+0xc>
 67e:	00 94       	com	r0
 680:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__negsi2>
 684:	57 fd       	sbrc	r21, 7
 686:	07 d0       	rcall	.+14     	; 0x696 <__divmodsi4_neg2>
 688:	0e 94 66 03 	call	0x6cc	; 0x6cc <__udivmodsi4>
 68c:	07 fc       	sbrc	r0, 7
 68e:	03 d0       	rcall	.+6      	; 0x696 <__divmodsi4_neg2>
 690:	4e f4       	brtc	.+18     	; 0x6a4 <__divmodsi4_exit>
 692:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__negsi2>

00000696 <__divmodsi4_neg2>:
 696:	50 95       	com	r21
 698:	40 95       	com	r20
 69a:	30 95       	com	r19
 69c:	21 95       	neg	r18
 69e:	3f 4f       	sbci	r19, 0xFF	; 255
 6a0:	4f 4f       	sbci	r20, 0xFF	; 255
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255

000006a4 <__divmodsi4_exit>:
 6a4:	08 95       	ret

000006a6 <__negsi2>:
 6a6:	90 95       	com	r25
 6a8:	80 95       	com	r24
 6aa:	70 95       	com	r23
 6ac:	61 95       	neg	r22
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255
 6b0:	8f 4f       	sbci	r24, 0xFF	; 255
 6b2:	9f 4f       	sbci	r25, 0xFF	; 255
 6b4:	08 95       	ret

000006b6 <__muluhisi3>:
 6b6:	0e 94 88 03 	call	0x710	; 0x710 <__umulhisi3>
 6ba:	a5 9f       	mul	r26, r21
 6bc:	90 0d       	add	r25, r0
 6be:	b4 9f       	mul	r27, r20
 6c0:	90 0d       	add	r25, r0
 6c2:	a4 9f       	mul	r26, r20
 6c4:	80 0d       	add	r24, r0
 6c6:	91 1d       	adc	r25, r1
 6c8:	11 24       	eor	r1, r1
 6ca:	08 95       	ret

000006cc <__udivmodsi4>:
 6cc:	a1 e2       	ldi	r26, 0x21	; 33
 6ce:	1a 2e       	mov	r1, r26
 6d0:	aa 1b       	sub	r26, r26
 6d2:	bb 1b       	sub	r27, r27
 6d4:	fd 01       	movw	r30, r26
 6d6:	0d c0       	rjmp	.+26     	; 0x6f2 <__udivmodsi4_ep>

000006d8 <__udivmodsi4_loop>:
 6d8:	aa 1f       	adc	r26, r26
 6da:	bb 1f       	adc	r27, r27
 6dc:	ee 1f       	adc	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	a2 17       	cp	r26, r18
 6e2:	b3 07       	cpc	r27, r19
 6e4:	e4 07       	cpc	r30, r20
 6e6:	f5 07       	cpc	r31, r21
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__udivmodsi4_ep>
 6ea:	a2 1b       	sub	r26, r18
 6ec:	b3 0b       	sbc	r27, r19
 6ee:	e4 0b       	sbc	r30, r20
 6f0:	f5 0b       	sbc	r31, r21

000006f2 <__udivmodsi4_ep>:
 6f2:	66 1f       	adc	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	88 1f       	adc	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	1a 94       	dec	r1
 6fc:	69 f7       	brne	.-38     	; 0x6d8 <__udivmodsi4_loop>
 6fe:	60 95       	com	r22
 700:	70 95       	com	r23
 702:	80 95       	com	r24
 704:	90 95       	com	r25
 706:	9b 01       	movw	r18, r22
 708:	ac 01       	movw	r20, r24
 70a:	bd 01       	movw	r22, r26
 70c:	cf 01       	movw	r24, r30
 70e:	08 95       	ret

00000710 <__umulhisi3>:
 710:	a2 9f       	mul	r26, r18
 712:	b0 01       	movw	r22, r0
 714:	b3 9f       	mul	r27, r19
 716:	c0 01       	movw	r24, r0
 718:	a3 9f       	mul	r26, r19
 71a:	70 0d       	add	r23, r0
 71c:	81 1d       	adc	r24, r1
 71e:	11 24       	eor	r1, r1
 720:	91 1d       	adc	r25, r1
 722:	b2 9f       	mul	r27, r18
 724:	70 0d       	add	r23, r0
 726:	81 1d       	adc	r24, r1
 728:	11 24       	eor	r1, r1
 72a:	91 1d       	adc	r25, r1
 72c:	08 95       	ret

0000072e <_exit>:
 72e:	f8 94       	cli

00000730 <__stop_program>:
 730:	ff cf       	rjmp	.-2      	; 0x730 <__stop_program>
