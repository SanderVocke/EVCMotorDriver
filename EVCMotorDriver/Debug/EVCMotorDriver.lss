
EVCMotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000003f  00800060  00800060  00000af6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c0  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c68  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000335  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000427  00000000  00000000  00001b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000264  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000405  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000081e  00000000  00000000  00002615  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  00002e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 14 04 	jmp	0x828	; 0x828 <__vector_1>
   8:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 39       	cpi	r26, 0x9F	; 159
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  74:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <onIN1>:
    }
}

//input handlers
void onIN1(void){ //stop the motors.
	setMotorSpeed(LEFT_MOTOR, 0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 41 01 	call	0x282	; 0x282 <setMotorSpeed>
	setMotorSpeed(RIGHT_MOTOR, 0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 41 01 	call	0x282	; 0x282 <setMotorSpeed>
  8c:	08 95       	ret

0000008e <onIN2>:
}
void onIN2(void){
	if(t_speed_right == 0 || t_speed_left == 0){ //if stopped, this button starts the motors
  8e:	80 91 72 00 	lds	r24, 0x0072
  92:	88 23       	and	r24, r24
  94:	21 f0       	breq	.+8      	; 0x9e <onIN2+0x10>
  96:	80 91 8f 00 	lds	r24, 0x008F
  9a:	81 11       	cpse	r24, r1
  9c:	09 c0       	rjmp	.+18     	; 0xb0 <onIN2+0x22>
		setMotorSpeed(LEFT_MOTOR, 100);
  9e:	64 e6       	ldi	r22, 0x64	; 100
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 41 01 	call	0x282	; 0x282 <setMotorSpeed>
		setMotorSpeed(RIGHT_MOTOR, 100);
  a6:	64 e6       	ldi	r22, 0x64	; 100
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 41 01 	call	0x282	; 0x282 <setMotorSpeed>
  ae:	08 95       	ret
	}
	else{ //if running, this button changes the direction.
		if(getMotorDirection(LEFT_MOTOR) == FORWARD) setMotorDirection(LEFT_MOTOR, BACKWARD);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 4c 01 	call	0x298	; 0x298 <getMotorDirection>
  b6:	81 11       	cpse	r24, r1
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <onIN2+0x34>
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setMotorDirection>
  c0:	04 c0       	rjmp	.+8      	; 0xca <onIN2+0x3c>
		else setMotorDirection(LEFT_MOTOR, FORWARD);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setMotorDirection>
		if(getMotorDirection(RIGHT_MOTOR) == FORWARD) setMotorDirection(RIGHT_MOTOR, BACKWARD);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 4c 01 	call	0x298	; 0x298 <getMotorDirection>
  d0:	81 11       	cpse	r24, r1
  d2:	05 c0       	rjmp	.+10     	; 0xde <onIN2+0x50>
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setMotorDirection>
  dc:	08 95       	ret
		else setMotorDirection(RIGHT_MOTOR, FORWARD);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setMotorDirection>
  e6:	08 95       	ret

000000e8 <updateInputs>:
	}
}

void updateInputs(void){
	if(PINA & 0b00000100) IN1down = 0; //IN1 is up
  e8:	ca 9b       	sbis	0x19, 2	; 25
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <updateInputs+0xa>
  ec:	10 92 63 00 	sts	0x0063, r1
  f0:	09 c0       	rjmp	.+18     	; 0x104 <updateInputs+0x1c>
	else{ //IN1 is down
		if(!IN1down) onIN1();
  f2:	80 91 63 00 	lds	r24, 0x0063
  f6:	81 11       	cpse	r24, r1
  f8:	02 c0       	rjmp	.+4      	; 0xfe <updateInputs+0x16>
  fa:	0e 94 3e 00 	call	0x7c	; 0x7c <onIN1>
		IN1down = 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 63 00 	sts	0x0063, r24
	}
	if(PINA & 0b00001000) IN2down = 0; //IN2 is up
 104:	cb 9b       	sbis	0x19, 3	; 25
 106:	03 c0       	rjmp	.+6      	; 0x10e <updateInputs+0x26>
 108:	10 92 62 00 	sts	0x0062, r1
 10c:	08 95       	ret
	else{ //IN2 is down
		if(!IN2down) onIN2();
 10e:	80 91 62 00 	lds	r24, 0x0062
 112:	81 11       	cpse	r24, r1
 114:	02 c0       	rjmp	.+4      	; 0x11a <updateInputs+0x32>
 116:	0e 94 47 00 	call	0x8e	; 0x8e <onIN2>
		IN2down = 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 62 00 	sts	0x0062, r24
 120:	08 95       	ret

00000122 <init>:
	//Init I/O pins
	
	/* Port A:
	- pint 2 and 3: IN1 and IN2 pushbuttons, respectively
	*/
	PORTA |= 0b00001100; //enable pull-ups on PA2/PA3
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	8c 60       	ori	r24, 0x0C	; 12
 126:	8b bb       	out	0x1b, r24	; 27
	
	//Init I2C slave mode
	TWAR = (I2C_SLAVE_ADDR<<1)|1; //slave addr (bits 7-1) and respond to general call
 128:	87 e1       	ldi	r24, 0x17	; 23
 12a:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWIE); //slave mode config
 12c:	85 e4       	ldi	r24, 0x45	; 69
 12e:	86 bf       	out	0x36, r24	; 54
	
	initMotors();
 130:	0e 94 90 01 	call	0x320	; 0x320 <initMotors>
	
	//global interrupts
	sei();
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <main>:
void updateInputs(void);
void init(void);

int main(void)
{	
	init();
 138:	0e 94 91 00 	call	0x122	; 0x122 <init>
	
    while(1){
#ifndef OPEN_LOOP_CONTROL
		updateSpeed();
 13c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <updateSpeed>
#endif
		updateInputs();
 140:	0e 94 74 00 	call	0xe8	; 0xe8 <updateInputs>
 144:	fb cf       	rjmp	.-10     	; 0x13c <main+0x4>

00000146 <processI2CByte>:
	//global interrupts
	sei();
}

void processI2CByte(){
	uint8_t byte = TWDR;
 146:	93 b1       	in	r25, 0x03	; 3
	//first byte: selects motor and direction.	
	if(i2c_r_index==0){
 148:	80 91 69 00 	lds	r24, 0x0069
 14c:	81 11       	cpse	r24, r1
 14e:	0c c0       	rjmp	.+24     	; 0x168 <processI2CByte+0x22>
		i2c_motor = (byte & MOTOR_BIT) ? LEFT_MOTOR : RIGHT_MOTOR;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	91 fb       	bst	r25, 1
 154:	22 27       	eor	r18, r18
 156:	20 f9       	bld	r18, 0
 158:	28 27       	eor	r18, r24
 15a:	20 93 61 00 	sts	0x0061, r18
		i2c_direction = (byte & DIRECTION_BIT) ? FORWARD : BACKWARD;		
 15e:	98 27       	eor	r25, r24
 160:	91 70       	andi	r25, 0x01	; 1
 162:	90 93 60 00 	sts	0x0060, r25
 166:	08 95       	ret
	}
	else if(i2c_r_index==1){
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	31 f4       	brne	.+12     	; 0x178 <processI2CByte+0x32>
		setMotorDirection(i2c_motor, i2c_direction);
 16c:	60 91 60 00 	lds	r22, 0x0060
 170:	80 91 61 00 	lds	r24, 0x0061
 174:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setMotorDirection>
 178:	08 95       	ret

0000017a <__vector_19>:
#endif
	}
}

//interrupt handler for I2C slave operation
ISR(TWI_vect){	
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	cf 93       	push	r28
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	uint8_t sreg_save = SREG;
 19e:	cf b7       	in	r28, 0x3f	; 63
	cli();
 1a0:	f8 94       	cli
	switch(TW_STATUS){
 1a2:	81 b1       	in	r24, 0x01	; 1
 1a4:	88 7f       	andi	r24, 0xF8	; 248
 1a6:	88 38       	cpi	r24, 0x88	; 136
 1a8:	a1 f1       	breq	.+104    	; 0x212 <__vector_19+0x98>
 1aa:	60 f4       	brcc	.+24     	; 0x1c4 <__vector_19+0x4a>
 1ac:	80 36       	cpi	r24, 0x60	; 96
 1ae:	b9 f0       	breq	.+46     	; 0x1de <__vector_19+0x64>
 1b0:	20 f4       	brcc	.+8      	; 0x1ba <__vector_19+0x40>
 1b2:	88 23       	and	r24, r24
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <__vector_19+0x3e>
 1b6:	50 c0       	rjmp	.+160    	; 0x258 <__vector_19+0xde>
 1b8:	51 c0       	rjmp	.+162    	; 0x25c <__vector_19+0xe2>
 1ba:	88 36       	cpi	r24, 0x68	; 104
 1bc:	21 f1       	breq	.+72     	; 0x206 <__vector_19+0x8c>
 1be:	80 38       	cpi	r24, 0x80	; 128
 1c0:	99 f0       	breq	.+38     	; 0x1e8 <__vector_19+0x6e>
 1c2:	4c c0       	rjmp	.+152    	; 0x25c <__vector_19+0xe2>
 1c4:	88 3b       	cpi	r24, 0xB8	; 184
 1c6:	89 f1       	breq	.+98     	; 0x22a <__vector_19+0xb0>
 1c8:	28 f4       	brcc	.+10     	; 0x1d4 <__vector_19+0x5a>
 1ca:	80 3a       	cpi	r24, 0xA0	; 160
 1cc:	f9 f0       	breq	.+62     	; 0x20c <__vector_19+0x92>
 1ce:	88 3a       	cpi	r24, 0xA8	; 168
 1d0:	19 f1       	breq	.+70     	; 0x218 <__vector_19+0x9e>
 1d2:	44 c0       	rjmp	.+136    	; 0x25c <__vector_19+0xe2>
 1d4:	80 3c       	cpi	r24, 0xC0	; 192
 1d6:	e9 f1       	breq	.+122    	; 0x252 <__vector_19+0xd8>
 1d8:	88 3c       	cpi	r24, 0xC8	; 200
 1da:	d9 f1       	breq	.+118    	; 0x252 <__vector_19+0xd8>
 1dc:	3f c0       	rjmp	.+126    	; 0x25c <__vector_19+0xe2>
		//--------------Slave receiver------------------------------------
		//SLA_W received and acked, prepare for data receiving
		case 0x60:
		TWACK;
 1de:	85 ec       	ldi	r24, 0xC5	; 197
 1e0:	86 bf       	out	0x36, r24	; 54
		i2c_r_index = 0;
 1e2:	10 92 69 00 	sts	0x0069, r1
		break;
 1e6:	3a c0       	rjmp	.+116    	; 0x25c <__vector_19+0xe2>
		case 0x80:  //a byte was received, store it and
		//setup the buffer to recieve another
		//i2c_r[i2c_r_index] = TWDR;
		processI2CByte();
 1e8:	0e 94 a3 00 	call	0x146	; 0x146 <processI2CByte>
		i2c_r_index++;
 1ec:	80 91 69 00 	lds	r24, 0x0069
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	80 93 69 00 	sts	0x0069, r24
		//don't ack next data if buffer is full
		if(i2c_r_index >= I2C_BUFSIZE_RECV){
 1f6:	86 30       	cpi	r24, 0x06	; 6
 1f8:	18 f0       	brcs	.+6      	; 0x200 <__vector_19+0x86>
			TWNACK;
 1fa:	85 e8       	ldi	r24, 0x85	; 133
 1fc:	86 bf       	out	0x36, r24	; 54
 1fe:	2e c0       	rjmp	.+92     	; 0x25c <__vector_19+0xe2>
			}else {
			TWACK;
 200:	85 ec       	ldi	r24, 0xC5	; 197
 202:	86 bf       	out	0x36, r24	; 54
 204:	2b c0       	rjmp	.+86     	; 0x25c <__vector_19+0xe2>
		}
		break;
		case 0x68://adressed as slave while in master mode.
		//should never happen, better reset;
		i2c_rst=1;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 68 00 	sts	0x0068, r24
		case 0xA0: //Stop or rep start, reset state machine
		TWACK;
 20c:	85 ec       	ldi	r24, 0xC5	; 197
 20e:	86 bf       	out	0x36, r24	; 54
		break;
 210:	25 c0       	rjmp	.+74     	; 0x25c <__vector_19+0xe2>
		//-------------- error recovery ----------------------------------
		case 0x88: //data received  but not acked
		//should not happen if the master is behaving as expected
		//switch to not adressed mode
		TWACK;
 212:	85 ec       	ldi	r24, 0xC5	; 197
 214:	86 bf       	out	0x36, r24	; 54
		break;
 216:	22 c0       	rjmp	.+68     	; 0x25c <__vector_19+0xe2>
		//---------------Slave Transmitter--------------------------------
		case 0xA8:  //SLA R received, prep for transmission
		//and load first data
		i2c_t_index=1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 67 00 	sts	0x0067, r24
		TWDR = i2c_t[0];
 21e:	80 91 64 00 	lds	r24, 0x0064
 222:	83 b9       	out	0x03, r24	; 3
		TWACK;
 224:	85 ec       	ldi	r24, 0xC5	; 197
 226:	86 bf       	out	0x36, r24	; 54
		break;
 228:	19 c0       	rjmp	.+50     	; 0x25c <__vector_19+0xe2>
		case 0xB8:  //data transmitted and acked by master, load next
		TWDR = i2c_t[i2c_t_index];
 22a:	e0 91 67 00 	lds	r30, 0x0067
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ec 59       	subi	r30, 0x9C	; 156
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	80 81       	ld	r24, Z
 236:	83 b9       	out	0x03, r24	; 3
		i2c_t_index++;
 238:	80 91 67 00 	lds	r24, 0x0067
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 67 00 	sts	0x0067, r24
		//designate last byte if we're at the end of the buffer
		if(i2c_t_index >= I2C_BUFSIZE_TRAN) TWNACK;
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	18 f0       	brcs	.+6      	; 0x24c <__vector_19+0xd2>
 246:	85 e8       	ldi	r24, 0x85	; 133
 248:	86 bf       	out	0x36, r24	; 54
 24a:	08 c0       	rjmp	.+16     	; 0x25c <__vector_19+0xe2>
		else TWACK;
 24c:	85 ec       	ldi	r24, 0xC5	; 197
 24e:	86 bf       	out	0x36, r24	; 54
 250:	05 c0       	rjmp	.+10     	; 0x25c <__vector_19+0xe2>
		case 0xC8: //last byte send and acked by master
		//last bytes should not be acked, ignore till start/stop
		//reset=1;
		case 0xC0: //last byte send and nacked by master
		//(as should be)
		TWACK;
 252:	85 ec       	ldi	r24, 0xC5	; 197
 254:	86 bf       	out	0x36, r24	; 54
		break;
 256:	02 c0       	rjmp	.+4      	; 0x25c <__vector_19+0xe2>
		//--------------------- bus error---------------------------------
		//illegal start or stop received, reset the I2C hardware
		case 0x00:
		TWRESET;
 258:	85 ed       	ldi	r24, 0xD5	; 213
 25a:	86 bf       	out	0x36, r24	; 54
		break;
	}
	SREG = sreg_save;
 25c:	cf bf       	out	0x3f, r28	; 63
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	cf 91       	pop	r28
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <setMotorSpeed>:
	TIMSK |= 0b00000001; //enable overflow interrupt
	#endif
}

void setMotorSpeed(motor_t motor, uint8_t speed){
	switch(motor){
 282:	88 23       	and	r24, r24
 284:	19 f0       	breq	.+6      	; 0x28c <setMotorSpeed+0xa>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	21 f0       	breq	.+8      	; 0x292 <setMotorSpeed+0x10>
 28a:	08 95       	ret
		case LEFT_MOTOR:
		t_speed_left = speed;
 28c:	60 93 8f 00 	sts	0x008F, r22
		break;
 290:	08 95       	ret
		case RIGHT_MOTOR:
		t_speed_right = speed;
 292:	60 93 72 00 	sts	0x0072, r22
 296:	08 95       	ret

00000298 <getMotorDirection>:
		break;
	}
}

direction_t getMotorDirection(motor_t motor){
	switch(motor){
 298:	88 23       	and	r24, r24
 29a:	19 f0       	breq	.+6      	; 0x2a2 <getMotorDirection+0xa>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	29 f0       	breq	.+10     	; 0x2aa <getMotorDirection+0x12>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <getMotorDirection+0x1a>
		case LEFT_MOTOR:
		return (PORTA & 0b00000001) ? FORWARD : BACKWARD;
 2a2:	8b b3       	in	r24, 0x1b	; 27
 2a4:	80 95       	com	r24
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	08 95       	ret
		break;
		case RIGHT_MOTOR:
		return (PORTA & 0b00000010) ? BACKWARD : FORWARD;
 2aa:	8b b3       	in	r24, 0x1b	; 27
 2ac:	86 95       	lsr	r24
 2ae:	81 70       	andi	r24, 0x01	; 1
 2b0:	08 95       	ret
		break;
	}
	return FORWARD;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
}
 2b4:	08 95       	ret

000002b6 <setMotorDirection>:

void setMotorDirection(motor_t motor, direction_t direction){
	switch(motor){
 2b6:	88 23       	and	r24, r24
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <setMotorDirection+0xa>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	c9 f0       	breq	.+50     	; 0x2f0 <setMotorDirection+0x3a>
 2be:	08 95       	ret
		case LEFT_MOTOR:
		if(direction != left_dir){
 2c0:	80 91 71 00 	lds	r24, 0x0071
 2c4:	68 17       	cp	r22, r24
 2c6:	71 f0       	breq	.+28     	; 0x2e4 <setMotorDirection+0x2e>
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 2c8:	10 92 87 00 	sts	0x0087, r1
		OCR1A = 255-duty;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	9b bd       	out	0x2b, r25	; 43
 2d2:	8a bd       	out	0x2a, r24	; 42
void setMotorDirection(motor_t motor, direction_t direction){
	switch(motor){
		case LEFT_MOTOR:
		if(direction != left_dir){
			setMotorDuty(LEFT_MOTOR, 0); //stop if changing direction
			I_left = 0; //reset error
 2d4:	10 92 7c 00 	sts	0x007C, r1
 2d8:	10 92 7d 00 	sts	0x007D, r1
 2dc:	10 92 7e 00 	sts	0x007E, r1
 2e0:	10 92 7f 00 	sts	0x007F, r1
		}
		if(direction==FORWARD) PORTA |= 0b00000001;
 2e4:	61 11       	cpse	r22, r1
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <setMotorDirection+0x36>
 2e8:	d8 9a       	sbi	0x1b, 0	; 27
 2ea:	08 95       	ret
		else PORTA &= 0b11111110;
 2ec:	d8 98       	cbi	0x1b, 0	; 27
 2ee:	08 95       	ret
		break;
		case RIGHT_MOTOR:
		if(direction != right_dir){
 2f0:	80 91 94 00 	lds	r24, 0x0094
 2f4:	68 17       	cp	r22, r24
 2f6:	71 f0       	breq	.+28     	; 0x314 <setMotorDirection+0x5e>
		case LEFT_MOTOR:
		duty_left = duty;
		OCR1A = 255-duty;
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 2f8:	10 92 9c 00 	sts	0x009C, r1
		OCR1B =255-duty;
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	99 bd       	out	0x29, r25	; 41
 302:	88 bd       	out	0x28, r24	; 40
		else PORTA &= 0b11111110;
		break;
		case RIGHT_MOTOR:
		if(direction != right_dir){
			setMotorDuty(RIGHT_MOTOR, 0); //stop if changing direction
			I_right = 0; //reset error
 304:	10 92 90 00 	sts	0x0090, r1
 308:	10 92 91 00 	sts	0x0091, r1
 30c:	10 92 92 00 	sts	0x0092, r1
 310:	10 92 93 00 	sts	0x0093, r1
		}
		if(direction==FORWARD) PORTA &= 0b11111101;
 314:	61 11       	cpse	r22, r1
 316:	02 c0       	rjmp	.+4      	; 0x31c <setMotorDirection+0x66>
 318:	d9 98       	cbi	0x1b, 1	; 27
 31a:	08 95       	ret
		else PORTA |= 0b00000010;
 31c:	d9 9a       	sbi	0x1b, 1	; 27
 31e:	08 95       	ret

00000320 <initMotors>:
#include <avr/interrupt.h>
#include <util/twi.h>

void initMotors(void){
	//control globals: measurement
	intref_left[0] = intref_left[1] = intref_left[2] = 0;
 320:	10 92 8a 00 	sts	0x008A, r1
 324:	10 92 89 00 	sts	0x0089, r1
 328:	10 92 88 00 	sts	0x0088, r1
	intref_right[0] = intref_right[1] = intref_right[2] = 0;
 32c:	10 92 9b 00 	sts	0x009B, r1
 330:	10 92 9a 00 	sts	0x009A, r1
 334:	10 92 99 00 	sts	0x0099, r1
	lastangle_right = 0;
 338:	10 92 9e 00 	sts	0x009E, r1
 33c:	10 92 9d 00 	sts	0x009D, r1
	lastangle_left = 0;
 340:	10 92 6f 00 	sts	0x006F, r1
 344:	10 92 6e 00 	sts	0x006E, r1
	do_ticks=1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 84 00 	sts	0x0084, r24
	ticks_right = 0;
 34e:	10 92 75 00 	sts	0x0075, r1
	ticks_left = 0;
 352:	10 92 86 00 	sts	0x0086, r1
	prescaler = DIV_SPEED_TIMER;
 356:	88 e2       	ldi	r24, 0x28	; 40
 358:	80 93 73 00 	sts	0x0073, r24
	doUpdate = 0;
 35c:	10 92 70 00 	sts	0x0070, r1
	i_angles_left = 0;
	i_angles_right = 0;
	#endif

	//control globals: PID
	t_speed_left = 0;
 360:	10 92 8f 00 	sts	0x008F, r1
	t_speed_right = 0;
 364:	10 92 72 00 	sts	0x0072, r1
	speed_left = 0;
 368:	10 92 85 00 	sts	0x0085, r1
	speed_right = 0;
 36c:	10 92 74 00 	sts	0x0074, r1
	duty_left = 0;
 370:	10 92 87 00 	sts	0x0087, r1
	duty_right = 0;
 374:	10 92 9c 00 	sts	0x009C, r1
	left_dir = FORWARD;
 378:	10 92 71 00 	sts	0x0071, r1
	right_dir = FORWARD;
 37c:	10 92 94 00 	sts	0x0094, r1
	I_left = 0;
 380:	10 92 7c 00 	sts	0x007C, r1
 384:	10 92 7d 00 	sts	0x007D, r1
 388:	10 92 7e 00 	sts	0x007E, r1
 38c:	10 92 7f 00 	sts	0x007F, r1
	I_right = 0;
 390:	10 92 90 00 	sts	0x0090, r1
 394:	10 92 91 00 	sts	0x0091, r1
 398:	10 92 92 00 	sts	0x0092, r1
 39c:	10 92 93 00 	sts	0x0093, r1
	//Init I/O pins
	
	/* Port A:
	- pins 0 and 1: direction outputs to motor controller (CW/CCW).
	*/
	DDRA |= 0b00000011;
 3a0:	8a b3       	in	r24, 0x1a	; 26
 3a2:	83 60       	ori	r24, 0x03	; 3
 3a4:	8a bb       	out	0x1a, r24	; 26
	
	/* Port D:
	- pins 4 and 5: PWM outputs to motor controller.
	- pins 2 and 3: PWM (interrupt) inputs from angle sensors.
	*/
	DDRD |= 0b00110000;
 3a6:	81 b3       	in	r24, 0x11	; 17
 3a8:	80 63       	ori	r24, 0x30	; 48
 3aa:	81 bb       	out	0x11, r24	; 17
	
	//Init Motor Parameters
	setMotorDirection(LEFT_MOTOR, FORWARD);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setMotorDirection>
	setMotorDirection(RIGHT_MOTOR, BACKWARD);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setMotorDirection>
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 3bc:	10 92 87 00 	sts	0x0087, r1
		OCR1A = 255-duty;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9b bd       	out	0x2b, r25	; 43
 3c6:	8a bd       	out	0x2a, r24	; 42
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 3c8:	10 92 9c 00 	sts	0x009C, r1
		OCR1B =255-duty;
 3cc:	99 bd       	out	0x29, r25	; 41
 3ce:	88 bd       	out	0x28, r24	; 40
}

void setMotorSpeed(motor_t motor, uint8_t speed){
	switch(motor){
		case LEFT_MOTOR:
		t_speed_left = speed;
 3d0:	10 92 8f 00 	sts	0x008F, r1
		break;
		case RIGHT_MOTOR:
		t_speed_right = speed;
 3d4:	84 e6       	ldi	r24, 0x64	; 100
 3d6:	80 93 72 00 	sts	0x0072, r24
	setMotorSpeed(RIGHT_MOTOR, 100);
#endif
	
	//Init Timers	
	//Timer/Counter1: For 100kHz PWM to motor driver.
	TCCR1A = 0b11110001; //Fast PWM mode, inverting
 3da:	81 ef       	ldi	r24, 0xF1	; 241
 3dc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001001; //Fast PWM mode, system clock source	
 3de:	89 e0       	ldi	r24, 0x09	; 9
 3e0:	8e bd       	out	0x2e, r24	; 46
	
	#ifndef OPEN_LOOP_CONTROL //if doing PID
	//Init external interrupts (PWM inputs)
	MCUCR |= 0b00000101; //any edge causes interrupt
 3e2:	85 b7       	in	r24, 0x35	; 53
 3e4:	85 60       	ori	r24, 0x05	; 5
 3e6:	85 bf       	out	0x35, r24	; 53
	GICR |= 0b11000000; //enable INTO and INT1
 3e8:	8b b7       	in	r24, 0x3b	; 59
 3ea:	80 6c       	ori	r24, 0xC0	; 192
 3ec:	8b bf       	out	0x3b, r24	; 59
	TCNT0 = 0; //reset timer 0 (right wheel)
 3ee:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0b00000010; //clk/8 = almost 500Hz overflow rate for the timer that times PWM. Starts timer.
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000001; //enable overflow interrupt
 3f4:	89 b7       	in	r24, 0x39	; 57
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	89 bf       	out	0x39, r24	; 57
 3fa:	08 95       	ret

000003fc <doPID>:
		else PORTA |= 0b00000010;
		break;
	}
}

void doPID(){
 3fc:	4f 92       	push	r4
 3fe:	5f 92       	push	r5
 400:	6f 92       	push	r6
 402:	7f 92       	push	r7
 404:	8f 92       	push	r8
 406:	9f 92       	push	r9
 408:	af 92       	push	r10
 40a:	bf 92       	push	r11
 40c:	cf 92       	push	r12
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
	if(t_speed_left <= MIN_SPEED) setMotorDuty(LEFT_MOTOR, 0);
 418:	80 91 8f 00 	lds	r24, 0x008F
 41c:	85 31       	cpi	r24, 0x15	; 21
 41e:	38 f4       	brcc	.+14     	; 0x42e <doPID+0x32>
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 420:	10 92 87 00 	sts	0x0087, r1
		OCR1A = 255-duty;
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	9b bd       	out	0x2b, r25	; 43
 42a:	8a bd       	out	0x2a, r24	; 42
 42c:	d5 c0       	rjmp	.+426    	; 0x5d8 <doPID+0x1dc>
}

void doPID(){
	if(t_speed_left <= MIN_SPEED) setMotorDuty(LEFT_MOTOR, 0);
	else{
		error = (int32_t)t_speed_left - (int32_t)speed_left;
 42e:	c8 2e       	mov	r12, r24
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	80 91 85 00 	lds	r24, 0x0085
 43a:	c8 1a       	sub	r12, r24
 43c:	d1 08       	sbc	r13, r1
 43e:	e1 08       	sbc	r14, r1
 440:	f1 08       	sbc	r15, r1
 442:	c0 92 95 00 	sts	0x0095, r12
 446:	d0 92 96 00 	sts	0x0096, r13
 44a:	e0 92 97 00 	sts	0x0097, r14
 44e:	f0 92 98 00 	sts	0x0098, r15
		I_left += error;
 452:	80 91 7c 00 	lds	r24, 0x007C
 456:	90 91 7d 00 	lds	r25, 0x007D
 45a:	a0 91 7e 00 	lds	r26, 0x007E
 45e:	b0 91 7f 00 	lds	r27, 0x007F
 462:	8c 0d       	add	r24, r12
 464:	9d 1d       	adc	r25, r13
 466:	ae 1d       	adc	r26, r14
 468:	bf 1d       	adc	r27, r15
 46a:	80 93 7c 00 	sts	0x007C, r24
 46e:	90 93 7d 00 	sts	0x007D, r25
 472:	a0 93 7e 00 	sts	0x007E, r26
 476:	b0 93 7f 00 	sts	0x007F, r27
		if(I_left > I_CAP) I_left = I_CAP;
 47a:	89 3e       	cpi	r24, 0xE9	; 233
 47c:	03 e0       	ldi	r16, 0x03	; 3
 47e:	90 07       	cpc	r25, r16
 480:	a1 05       	cpc	r26, r1
 482:	b1 05       	cpc	r27, r1
 484:	6c f0       	brlt	.+26     	; 0x4a0 <doPID+0xa4>
 486:	88 ee       	ldi	r24, 0xE8	; 232
 488:	93 e0       	ldi	r25, 0x03	; 3
 48a:	a0 e0       	ldi	r26, 0x00	; 0
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	80 93 7c 00 	sts	0x007C, r24
 492:	90 93 7d 00 	sts	0x007D, r25
 496:	a0 93 7e 00 	sts	0x007E, r26
 49a:	b0 93 7f 00 	sts	0x007F, r27
 49e:	11 c0       	rjmp	.+34     	; 0x4c2 <doPID+0xc6>
		if(I_left < (-I_CAP)) I_left = -I_CAP;
 4a0:	88 31       	cpi	r24, 0x18	; 24
 4a2:	9c 4f       	sbci	r25, 0xFC	; 252
 4a4:	af 4f       	sbci	r26, 0xFF	; 255
 4a6:	bf 4f       	sbci	r27, 0xFF	; 255
 4a8:	64 f4       	brge	.+24     	; 0x4c2 <doPID+0xc6>
 4aa:	88 e1       	ldi	r24, 0x18	; 24
 4ac:	9c ef       	ldi	r25, 0xFC	; 252
 4ae:	af ef       	ldi	r26, 0xFF	; 255
 4b0:	bf ef       	ldi	r27, 0xFF	; 255
 4b2:	80 93 7c 00 	sts	0x007C, r24
 4b6:	90 93 7d 00 	sts	0x007D, r25
 4ba:	a0 93 7e 00 	sts	0x007E, r26
 4be:	b0 93 7f 00 	sts	0x007F, r27
		newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_left)/1000 + (D_GAIN*(error-lasterror_left))/1000 + (int16_t)getMotorDuty(LEFT_MOTOR);
 4c2:	a0 e2       	ldi	r26, 0x20	; 32
 4c4:	b3 e0       	ldi	r27, 0x03	; 3
 4c6:	a7 01       	movw	r20, r14
 4c8:	96 01       	movw	r18, r12
 4ca:	0e 94 03 05 	call	0xa06	; 0xa06 <__muluhisi3>
 4ce:	0f 2e       	mov	r0, r31
 4d0:	f8 ee       	ldi	r31, 0xE8	; 232
 4d2:	8f 2e       	mov	r8, r31
 4d4:	f3 e0       	ldi	r31, 0x03	; 3
 4d6:	9f 2e       	mov	r9, r31
 4d8:	a1 2c       	mov	r10, r1
 4da:	b1 2c       	mov	r11, r1
 4dc:	f0 2d       	mov	r31, r0
 4de:	a5 01       	movw	r20, r10
 4e0:	94 01       	movw	r18, r8
 4e2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divmodsi4>
 4e6:	29 01       	movw	r4, r18
 4e8:	3a 01       	movw	r6, r20
 4ea:	20 91 7c 00 	lds	r18, 0x007C
 4ee:	30 91 7d 00 	lds	r19, 0x007D
 4f2:	40 91 7e 00 	lds	r20, 0x007E
 4f6:	50 91 7f 00 	lds	r21, 0x007F
 4fa:	a4 e6       	ldi	r26, 0x64	; 100
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	0e 94 03 05 	call	0xa06	; 0xa06 <__muluhisi3>
 502:	a5 01       	movw	r20, r10
 504:	94 01       	movw	r18, r8
 506:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divmodsi4>
 50a:	42 0e       	add	r4, r18
 50c:	53 1e       	adc	r5, r19
 50e:	64 1e       	adc	r6, r20
 510:	75 1e       	adc	r7, r21
 512:	80 91 80 00 	lds	r24, 0x0080
 516:	90 91 81 00 	lds	r25, 0x0081
 51a:	a0 91 82 00 	lds	r26, 0x0082
 51e:	b0 91 83 00 	lds	r27, 0x0083
 522:	a7 01       	movw	r20, r14
 524:	96 01       	movw	r18, r12
 526:	28 1b       	sub	r18, r24
 528:	39 0b       	sbc	r19, r25
 52a:	4a 0b       	sbc	r20, r26
 52c:	5b 0b       	sbc	r21, r27
 52e:	ac e2       	ldi	r26, 0x2C	; 44
 530:	b1 e0       	ldi	r27, 0x01	; 1
 532:	0e 94 03 05 	call	0xa06	; 0xa06 <__muluhisi3>
 536:	a5 01       	movw	r20, r10
 538:	94 01       	movw	r18, r8
 53a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divmodsi4>
 53e:	ba 01       	movw	r22, r20
 540:	a9 01       	movw	r20, r18
 542:	44 0d       	add	r20, r4
 544:	55 1d       	adc	r21, r5
 546:	66 1d       	adc	r22, r6
 548:	77 1d       	adc	r23, r7
 54a:	80 91 87 00 	lds	r24, 0x0087
 54e:	8a 01       	movw	r16, r20
 550:	9b 01       	movw	r18, r22
 552:	08 0f       	add	r16, r24
 554:	11 1d       	adc	r17, r1
 556:	21 1d       	adc	r18, r1
 558:	31 1d       	adc	r19, r1
 55a:	00 93 6a 00 	sts	0x006A, r16
 55e:	10 93 6b 00 	sts	0x006B, r17
 562:	20 93 6c 00 	sts	0x006C, r18
 566:	30 93 6d 00 	sts	0x006D, r19
		if(newSpeed < 0) newSpeed = 0;
 56a:	33 23       	and	r19, r19
 56c:	4c f4       	brge	.+18     	; 0x580 <doPID+0x184>
 56e:	10 92 6a 00 	sts	0x006A, r1
 572:	10 92 6b 00 	sts	0x006B, r1
 576:	10 92 6c 00 	sts	0x006C, r1
 57a:	10 92 6d 00 	sts	0x006D, r1
 57e:	12 c0       	rjmp	.+36     	; 0x5a4 <doPID+0x1a8>
		if(newSpeed > 255) newSpeed = 255;
 580:	0f 3f       	cpi	r16, 0xFF	; 255
 582:	11 05       	cpc	r17, r1
 584:	21 05       	cpc	r18, r1
 586:	31 05       	cpc	r19, r1
 588:	69 f0       	breq	.+26     	; 0x5a4 <doPID+0x1a8>
 58a:	64 f0       	brlt	.+24     	; 0x5a4 <doPID+0x1a8>
 58c:	8f ef       	ldi	r24, 0xFF	; 255
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	a0 e0       	ldi	r26, 0x00	; 0
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	80 93 6a 00 	sts	0x006A, r24
 598:	90 93 6b 00 	sts	0x006B, r25
 59c:	a0 93 6c 00 	sts	0x006C, r26
 5a0:	b0 93 6d 00 	sts	0x006D, r27
		setMotorDuty(LEFT_MOTOR, (uint8_t)newSpeed);
 5a4:	20 91 6a 00 	lds	r18, 0x006A
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 5a8:	20 93 87 00 	sts	0x0087, r18
		OCR1A = 255-duty;
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	82 1b       	sub	r24, r18
 5b2:	91 09       	sbc	r25, r1
 5b4:	9b bd       	out	0x2b, r25	; 43
 5b6:	8a bd       	out	0x2a, r24	; 42
		if(I_left < (-I_CAP)) I_left = -I_CAP;
		newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_left)/1000 + (D_GAIN*(error-lasterror_left))/1000 + (int16_t)getMotorDuty(LEFT_MOTOR);
		if(newSpeed < 0) newSpeed = 0;
		if(newSpeed > 255) newSpeed = 255;
		setMotorDuty(LEFT_MOTOR, (uint8_t)newSpeed);
		lasterror_left = error;
 5b8:	80 91 95 00 	lds	r24, 0x0095
 5bc:	90 91 96 00 	lds	r25, 0x0096
 5c0:	a0 91 97 00 	lds	r26, 0x0097
 5c4:	b0 91 98 00 	lds	r27, 0x0098
 5c8:	80 93 80 00 	sts	0x0080, r24
 5cc:	90 93 81 00 	sts	0x0081, r25
 5d0:	a0 93 82 00 	sts	0x0082, r26
 5d4:	b0 93 83 00 	sts	0x0083, r27
	}
	
	if(t_speed_right <= MIN_SPEED) setMotorDuty(RIGHT_MOTOR, 0);
 5d8:	80 91 72 00 	lds	r24, 0x0072
 5dc:	85 31       	cpi	r24, 0x15	; 21
 5de:	38 f4       	brcc	.+14     	; 0x5ee <doPID+0x1f2>
		case LEFT_MOTOR:
		duty_left = duty;
		OCR1A = 255-duty;
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 5e0:	10 92 9c 00 	sts	0x009C, r1
		OCR1B =255-duty;
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	99 bd       	out	0x29, r25	; 41
 5ea:	88 bd       	out	0x28, r24	; 40
 5ec:	d5 c0       	rjmp	.+426    	; 0x798 <doPID+0x39c>
		lasterror_left = error;
	}
	
	if(t_speed_right <= MIN_SPEED) setMotorDuty(RIGHT_MOTOR, 0);
	else{
		error = (int32_t)t_speed_right - (int32_t)speed_right;
 5ee:	c8 2e       	mov	r12, r24
 5f0:	d1 2c       	mov	r13, r1
 5f2:	e1 2c       	mov	r14, r1
 5f4:	f1 2c       	mov	r15, r1
 5f6:	80 91 74 00 	lds	r24, 0x0074
 5fa:	c8 1a       	sub	r12, r24
 5fc:	d1 08       	sbc	r13, r1
 5fe:	e1 08       	sbc	r14, r1
 600:	f1 08       	sbc	r15, r1
 602:	c0 92 95 00 	sts	0x0095, r12
 606:	d0 92 96 00 	sts	0x0096, r13
 60a:	e0 92 97 00 	sts	0x0097, r14
 60e:	f0 92 98 00 	sts	0x0098, r15
		I_right += error;
 612:	80 91 90 00 	lds	r24, 0x0090
 616:	90 91 91 00 	lds	r25, 0x0091
 61a:	a0 91 92 00 	lds	r26, 0x0092
 61e:	b0 91 93 00 	lds	r27, 0x0093
 622:	8c 0d       	add	r24, r12
 624:	9d 1d       	adc	r25, r13
 626:	ae 1d       	adc	r26, r14
 628:	bf 1d       	adc	r27, r15
 62a:	80 93 90 00 	sts	0x0090, r24
 62e:	90 93 91 00 	sts	0x0091, r25
 632:	a0 93 92 00 	sts	0x0092, r26
 636:	b0 93 93 00 	sts	0x0093, r27
		if(I_right > I_CAP) I_right = I_CAP;
 63a:	89 3e       	cpi	r24, 0xE9	; 233
 63c:	13 e0       	ldi	r17, 0x03	; 3
 63e:	91 07       	cpc	r25, r17
 640:	a1 05       	cpc	r26, r1
 642:	b1 05       	cpc	r27, r1
 644:	6c f0       	brlt	.+26     	; 0x660 <doPID+0x264>
 646:	88 ee       	ldi	r24, 0xE8	; 232
 648:	93 e0       	ldi	r25, 0x03	; 3
 64a:	a0 e0       	ldi	r26, 0x00	; 0
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	80 93 90 00 	sts	0x0090, r24
 652:	90 93 91 00 	sts	0x0091, r25
 656:	a0 93 92 00 	sts	0x0092, r26
 65a:	b0 93 93 00 	sts	0x0093, r27
 65e:	11 c0       	rjmp	.+34     	; 0x682 <doPID+0x286>
		if(I_right < (-I_CAP)) I_right = -I_CAP;
 660:	88 31       	cpi	r24, 0x18	; 24
 662:	9c 4f       	sbci	r25, 0xFC	; 252
 664:	af 4f       	sbci	r26, 0xFF	; 255
 666:	bf 4f       	sbci	r27, 0xFF	; 255
 668:	64 f4       	brge	.+24     	; 0x682 <doPID+0x286>
 66a:	88 e1       	ldi	r24, 0x18	; 24
 66c:	9c ef       	ldi	r25, 0xFC	; 252
 66e:	af ef       	ldi	r26, 0xFF	; 255
 670:	bf ef       	ldi	r27, 0xFF	; 255
 672:	80 93 90 00 	sts	0x0090, r24
 676:	90 93 91 00 	sts	0x0091, r25
 67a:	a0 93 92 00 	sts	0x0092, r26
 67e:	b0 93 93 00 	sts	0x0093, r27
		newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_right)/1000 + (D_GAIN*(error-lasterror_right))/1000 + (int16_t)getMotorDuty(RIGHT_MOTOR);
 682:	a0 e2       	ldi	r26, 0x20	; 32
 684:	b3 e0       	ldi	r27, 0x03	; 3
 686:	a7 01       	movw	r20, r14
 688:	96 01       	movw	r18, r12
 68a:	0e 94 03 05 	call	0xa06	; 0xa06 <__muluhisi3>
 68e:	0f 2e       	mov	r0, r31
 690:	f8 ee       	ldi	r31, 0xE8	; 232
 692:	8f 2e       	mov	r8, r31
 694:	f3 e0       	ldi	r31, 0x03	; 3
 696:	9f 2e       	mov	r9, r31
 698:	a1 2c       	mov	r10, r1
 69a:	b1 2c       	mov	r11, r1
 69c:	f0 2d       	mov	r31, r0
 69e:	a5 01       	movw	r20, r10
 6a0:	94 01       	movw	r18, r8
 6a2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divmodsi4>
 6a6:	29 01       	movw	r4, r18
 6a8:	3a 01       	movw	r6, r20
 6aa:	20 91 90 00 	lds	r18, 0x0090
 6ae:	30 91 91 00 	lds	r19, 0x0091
 6b2:	40 91 92 00 	lds	r20, 0x0092
 6b6:	50 91 93 00 	lds	r21, 0x0093
 6ba:	a4 e6       	ldi	r26, 0x64	; 100
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	0e 94 03 05 	call	0xa06	; 0xa06 <__muluhisi3>
 6c2:	a5 01       	movw	r20, r10
 6c4:	94 01       	movw	r18, r8
 6c6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divmodsi4>
 6ca:	42 0e       	add	r4, r18
 6cc:	53 1e       	adc	r5, r19
 6ce:	64 1e       	adc	r6, r20
 6d0:	75 1e       	adc	r7, r21
 6d2:	80 91 8b 00 	lds	r24, 0x008B
 6d6:	90 91 8c 00 	lds	r25, 0x008C
 6da:	a0 91 8d 00 	lds	r26, 0x008D
 6de:	b0 91 8e 00 	lds	r27, 0x008E
 6e2:	a7 01       	movw	r20, r14
 6e4:	96 01       	movw	r18, r12
 6e6:	28 1b       	sub	r18, r24
 6e8:	39 0b       	sbc	r19, r25
 6ea:	4a 0b       	sbc	r20, r26
 6ec:	5b 0b       	sbc	r21, r27
 6ee:	ac e2       	ldi	r26, 0x2C	; 44
 6f0:	b1 e0       	ldi	r27, 0x01	; 1
 6f2:	0e 94 03 05 	call	0xa06	; 0xa06 <__muluhisi3>
 6f6:	a5 01       	movw	r20, r10
 6f8:	94 01       	movw	r18, r8
 6fa:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divmodsi4>
 6fe:	ba 01       	movw	r22, r20
 700:	a9 01       	movw	r20, r18
 702:	44 0d       	add	r20, r4
 704:	55 1d       	adc	r21, r5
 706:	66 1d       	adc	r22, r6
 708:	77 1d       	adc	r23, r7
 70a:	80 91 9c 00 	lds	r24, 0x009C
 70e:	8a 01       	movw	r16, r20
 710:	9b 01       	movw	r18, r22
 712:	08 0f       	add	r16, r24
 714:	11 1d       	adc	r17, r1
 716:	21 1d       	adc	r18, r1
 718:	31 1d       	adc	r19, r1
 71a:	00 93 6a 00 	sts	0x006A, r16
 71e:	10 93 6b 00 	sts	0x006B, r17
 722:	20 93 6c 00 	sts	0x006C, r18
 726:	30 93 6d 00 	sts	0x006D, r19
		if(newSpeed < 0) newSpeed = 0;
 72a:	33 23       	and	r19, r19
 72c:	4c f4       	brge	.+18     	; 0x740 <doPID+0x344>
 72e:	10 92 6a 00 	sts	0x006A, r1
 732:	10 92 6b 00 	sts	0x006B, r1
 736:	10 92 6c 00 	sts	0x006C, r1
 73a:	10 92 6d 00 	sts	0x006D, r1
 73e:	12 c0       	rjmp	.+36     	; 0x764 <doPID+0x368>
		if(newSpeed > 255) newSpeed = 255;
 740:	0f 3f       	cpi	r16, 0xFF	; 255
 742:	11 05       	cpc	r17, r1
 744:	21 05       	cpc	r18, r1
 746:	31 05       	cpc	r19, r1
 748:	69 f0       	breq	.+26     	; 0x764 <doPID+0x368>
 74a:	64 f0       	brlt	.+24     	; 0x764 <doPID+0x368>
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	a0 e0       	ldi	r26, 0x00	; 0
 752:	b0 e0       	ldi	r27, 0x00	; 0
 754:	80 93 6a 00 	sts	0x006A, r24
 758:	90 93 6b 00 	sts	0x006B, r25
 75c:	a0 93 6c 00 	sts	0x006C, r26
 760:	b0 93 6d 00 	sts	0x006D, r27
		setMotorDuty(RIGHT_MOTOR, (uint8_t)newSpeed);
 764:	20 91 6a 00 	lds	r18, 0x006A
		case LEFT_MOTOR:
		duty_left = duty;
		OCR1A = 255-duty;
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 768:	20 93 9c 00 	sts	0x009C, r18
		OCR1B =255-duty;
 76c:	8f ef       	ldi	r24, 0xFF	; 255
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	82 1b       	sub	r24, r18
 772:	91 09       	sbc	r25, r1
 774:	99 bd       	out	0x29, r25	; 41
 776:	88 bd       	out	0x28, r24	; 40
		if(I_right < (-I_CAP)) I_right = -I_CAP;
		newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_right)/1000 + (D_GAIN*(error-lasterror_right))/1000 + (int16_t)getMotorDuty(RIGHT_MOTOR);
		if(newSpeed < 0) newSpeed = 0;
		if(newSpeed > 255) newSpeed = 255;
		setMotorDuty(RIGHT_MOTOR, (uint8_t)newSpeed);
		lasterror_right = error;
 778:	80 91 95 00 	lds	r24, 0x0095
 77c:	90 91 96 00 	lds	r25, 0x0096
 780:	a0 91 97 00 	lds	r26, 0x0097
 784:	b0 91 98 00 	lds	r27, 0x0098
 788:	80 93 8b 00 	sts	0x008B, r24
 78c:	90 93 8c 00 	sts	0x008C, r25
 790:	a0 93 8d 00 	sts	0x008D, r26
 794:	b0 93 8e 00 	sts	0x008E, r27
	}
	return;
}
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	ff 90       	pop	r15
 79e:	ef 90       	pop	r14
 7a0:	df 90       	pop	r13
 7a2:	cf 90       	pop	r12
 7a4:	bf 90       	pop	r11
 7a6:	af 90       	pop	r10
 7a8:	9f 90       	pop	r9
 7aa:	8f 90       	pop	r8
 7ac:	7f 90       	pop	r7
 7ae:	6f 90       	pop	r6
 7b0:	5f 90       	pop	r5
 7b2:	4f 90       	pop	r4
 7b4:	08 95       	ret

000007b6 <updateSpeed>:

//function that updates speed
void updateSpeed(void){
	if(!doUpdate) return;
 7b6:	80 91 70 00 	lds	r24, 0x0070
 7ba:	88 23       	and	r24, r24
 7bc:	a1 f1       	breq	.+104    	; 0x826 <updateSpeed+0x70>
	doUpdate = 0;
 7be:	10 92 70 00 	sts	0x0070, r1
	uint16_t speed16r = 10*ticks_right;
 7c2:	80 91 75 00 	lds	r24, 0x0075
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	9c 01       	movw	r18, r24
 7ca:	22 0f       	add	r18, r18
 7cc:	33 1f       	adc	r19, r19
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	28 0f       	add	r18, r24
 7dc:	39 1f       	adc	r19, r25
 7de:	82 2f       	mov	r24, r18
 7e0:	93 2f       	mov	r25, r19
	uint16_t speed16l = 10*ticks_left;
 7e2:	40 91 86 00 	lds	r20, 0x0086
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	ba 01       	movw	r22, r20
 7ea:	66 0f       	add	r22, r22
 7ec:	77 1f       	adc	r23, r23
 7ee:	44 0f       	add	r20, r20
 7f0:	55 1f       	adc	r21, r21
 7f2:	44 0f       	add	r20, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	44 0f       	add	r20, r20
 7f8:	55 1f       	adc	r21, r21
 7fa:	46 0f       	add	r20, r22
 7fc:	57 1f       	adc	r21, r23
	ticks_right = 0;
 7fe:	10 92 75 00 	sts	0x0075, r1
	ticks_left = 0;
 802:	10 92 86 00 	sts	0x0086, r1
	speed_left = (speed16l > 255)?255:(uint8_t)speed16l;
 806:	4f 3f       	cpi	r20, 0xFF	; 255
 808:	51 05       	cpc	r21, r1
 80a:	11 f0       	breq	.+4      	; 0x810 <updateSpeed+0x5a>
 80c:	08 f0       	brcs	.+2      	; 0x810 <updateSpeed+0x5a>
 80e:	4f ef       	ldi	r20, 0xFF	; 255
 810:	40 93 85 00 	sts	0x0085, r20
	speed_right = (speed16r > 255)?255:(uint8_t)speed16r;
 814:	8f 3f       	cpi	r24, 0xFF	; 255
 816:	91 05       	cpc	r25, r1
 818:	11 f0       	breq	.+4      	; 0x81e <updateSpeed+0x68>
 81a:	08 f0       	brcs	.+2      	; 0x81e <updateSpeed+0x68>
 81c:	2f ef       	ldi	r18, 0xFF	; 255
 81e:	20 93 74 00 	sts	0x0074, r18
	doPID();
 822:	0e 94 fe 01 	call	0x3fc	; 0x3fc <doPID>
 826:	08 95       	ret

00000828 <__vector_1>:
}

//interrupt handlers for external interrupts (get angle readings from motors)
ISR(INT0_vect){ //right motor
 828:	1f 92       	push	r1
 82a:	0f 92       	push	r0
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	0f 92       	push	r0
 830:	11 24       	eor	r1, r1
 832:	2f 93       	push	r18
 834:	3f 93       	push	r19
 836:	4f 93       	push	r20
 838:	5f 93       	push	r21
 83a:	6f 93       	push	r22
 83c:	7f 93       	push	r23
 83e:	8f 93       	push	r24
 840:	9f 93       	push	r25
 842:	af 93       	push	r26
 844:	bf 93       	push	r27
	uint8_t sreg_save = SREG;
 846:	3f b7       	in	r19, 0x3f	; 63
	cli();
 848:	f8 94       	cli
	uint8_t current_value = TCNT0;
 84a:	22 b7       	in	r18, 0x32	; 50
	if(PIND & 0b00000100){ //just went HIGH
 84c:	82 9b       	sbis	0x10, 2	; 16
 84e:	2b c0       	rjmp	.+86     	; 0x8a6 <__stack+0x47>
		uint8_t temp = intref_right[1]-intref_right[0];
 850:	80 91 9a 00 	lds	r24, 0x009A
 854:	90 91 99 00 	lds	r25, 0x0099
 858:	68 2f       	mov	r22, r24
 85a:	69 1b       	sub	r22, r25
		uint8_t temp2 = current_value-intref_right[1];
		uint16_t temp4 = temp2+temp;
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	96 2f       	mov	r25, r22
	uint8_t sreg_save = SREG;
	cli();
	uint8_t current_value = TCNT0;
	if(PIND & 0b00000100){ //just went HIGH
		uint8_t temp = intref_right[1]-intref_right[0];
		uint8_t temp2 = current_value-intref_right[1];
 860:	42 2f       	mov	r20, r18
 862:	48 1b       	sub	r20, r24
		uint16_t temp4 = temp2+temp;
 864:	64 0f       	add	r22, r20
 866:	71 1d       	adc	r23, r1
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__udivmodhi4>
 86e:	86 2f       	mov	r24, r22
 870:	97 2f       	mov	r25, r23
		if(do_ticks){
 872:	40 91 84 00 	lds	r20, 0x0084
 876:	44 23       	and	r20, r20
 878:	79 f0       	breq	.+30     	; 0x898 <__stack+0x39>
			if(temp3 < 170 && lastangle_right > 170) ticks_right++;
 87a:	8a 3a       	cpi	r24, 0xAA	; 170
 87c:	91 05       	cpc	r25, r1
 87e:	60 f4       	brcc	.+24     	; 0x898 <__stack+0x39>
 880:	80 91 9d 00 	lds	r24, 0x009D
 884:	90 91 9e 00 	lds	r25, 0x009E
 888:	8b 3a       	cpi	r24, 0xAB	; 171
 88a:	91 05       	cpc	r25, r1
 88c:	28 f0       	brcs	.+10     	; 0x898 <__stack+0x39>
 88e:	80 91 75 00 	lds	r24, 0x0075
 892:	8f 5f       	subi	r24, 0xFF	; 255
 894:	80 93 75 00 	sts	0x0075, r24
		}
		lastangle_right = temp3;
 898:	60 93 9d 00 	sts	0x009D, r22
 89c:	70 93 9e 00 	sts	0x009E, r23
		#ifdef STORE_ANGLES
		angles_right[i_angles_right%NUM_STORE_ANGLES] = lastangle_right;
		i_angles_right++;
		#endif
		intref_right[0] = current_value;
 8a0:	20 93 99 00 	sts	0x0099, r18
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
	}
	else{ //just went LOW
		intref_right[1] = current_value;
 8a6:	20 93 9a 00 	sts	0x009A, r18
	}
	SREG = sreg_save;
 8aa:	3f bf       	out	0x3f, r19	; 63
}
 8ac:	bf 91       	pop	r27
 8ae:	af 91       	pop	r26
 8b0:	9f 91       	pop	r25
 8b2:	8f 91       	pop	r24
 8b4:	7f 91       	pop	r23
 8b6:	6f 91       	pop	r22
 8b8:	5f 91       	pop	r21
 8ba:	4f 91       	pop	r20
 8bc:	3f 91       	pop	r19
 8be:	2f 91       	pop	r18
 8c0:	0f 90       	pop	r0
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	0f 90       	pop	r0
 8c6:	1f 90       	pop	r1
 8c8:	18 95       	reti

000008ca <__vector_2>:
ISR(INT1_vect){ //left motor
 8ca:	1f 92       	push	r1
 8cc:	0f 92       	push	r0
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	0f 92       	push	r0
 8d2:	11 24       	eor	r1, r1
 8d4:	2f 93       	push	r18
 8d6:	3f 93       	push	r19
 8d8:	4f 93       	push	r20
 8da:	5f 93       	push	r21
 8dc:	6f 93       	push	r22
 8de:	7f 93       	push	r23
 8e0:	8f 93       	push	r24
 8e2:	9f 93       	push	r25
 8e4:	af 93       	push	r26
 8e6:	bf 93       	push	r27
	uint8_t sreg_save = SREG;
 8e8:	3f b7       	in	r19, 0x3f	; 63
	cli();
 8ea:	f8 94       	cli
	uint8_t current_value = TCNT0;
 8ec:	22 b7       	in	r18, 0x32	; 50
	if(PIND & 0b00000100){ //just went HIGH
 8ee:	82 9b       	sbis	0x10, 2	; 16
 8f0:	2b c0       	rjmp	.+86     	; 0x948 <__vector_2+0x7e>
		uint8_t temp = intref_left[1]-intref_left[0];
 8f2:	80 91 89 00 	lds	r24, 0x0089
 8f6:	90 91 88 00 	lds	r25, 0x0088
 8fa:	68 2f       	mov	r22, r24
 8fc:	69 1b       	sub	r22, r25
		uint8_t temp2 = current_value-intref_left[1];
		uint16_t temp4 = temp2+temp;
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	96 2f       	mov	r25, r22
	uint8_t sreg_save = SREG;
	cli();
	uint8_t current_value = TCNT0;
	if(PIND & 0b00000100){ //just went HIGH
		uint8_t temp = intref_left[1]-intref_left[0];
		uint8_t temp2 = current_value-intref_left[1];
 902:	42 2f       	mov	r20, r18
 904:	48 1b       	sub	r20, r24
		uint16_t temp4 = temp2+temp;
 906:	64 0f       	add	r22, r20
 908:	71 1d       	adc	r23, r1
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__udivmodhi4>
 910:	86 2f       	mov	r24, r22
 912:	97 2f       	mov	r25, r23
		if(do_ticks){
 914:	40 91 84 00 	lds	r20, 0x0084
 918:	44 23       	and	r20, r20
 91a:	79 f0       	breq	.+30     	; 0x93a <__vector_2+0x70>
			if(temp3 < 170 && lastangle_left > 170) ticks_left++;
 91c:	8a 3a       	cpi	r24, 0xAA	; 170
 91e:	91 05       	cpc	r25, r1
 920:	60 f4       	brcc	.+24     	; 0x93a <__vector_2+0x70>
 922:	80 91 6e 00 	lds	r24, 0x006E
 926:	90 91 6f 00 	lds	r25, 0x006F
 92a:	8b 3a       	cpi	r24, 0xAB	; 171
 92c:	91 05       	cpc	r25, r1
 92e:	28 f0       	brcs	.+10     	; 0x93a <__vector_2+0x70>
 930:	80 91 86 00 	lds	r24, 0x0086
 934:	8f 5f       	subi	r24, 0xFF	; 255
 936:	80 93 86 00 	sts	0x0086, r24
		}
		lastangle_left = temp3;
 93a:	60 93 6e 00 	sts	0x006E, r22
 93e:	70 93 6f 00 	sts	0x006F, r23
		#ifdef STORE_ANGLES
		angles_left[i_angles_left%NUM_STORE_ANGLES] = lastangle_left;
		i_angles_left++;
		#endif
		intref_left[0] = current_value;
 942:	20 93 88 00 	sts	0x0088, r18
 946:	02 c0       	rjmp	.+4      	; 0x94c <__vector_2+0x82>
	}
	else{ //just went LOW
		intref_left[1] = current_value;
 948:	20 93 89 00 	sts	0x0089, r18
	}
	SREG = sreg_save;
 94c:	3f bf       	out	0x3f, r19	; 63
}
 94e:	bf 91       	pop	r27
 950:	af 91       	pop	r26
 952:	9f 91       	pop	r25
 954:	8f 91       	pop	r24
 956:	7f 91       	pop	r23
 958:	6f 91       	pop	r22
 95a:	5f 91       	pop	r21
 95c:	4f 91       	pop	r20
 95e:	3f 91       	pop	r19
 960:	2f 91       	pop	r18
 962:	0f 90       	pop	r0
 964:	0f be       	out	0x3f, r0	; 63
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <__vector_11>:

//Overflow handler of timer 0 (500Hz)
ISR(TIMER0_OVF_vect){
 96c:	1f 92       	push	r1
 96e:	0f 92       	push	r0
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	0f 92       	push	r0
 974:	11 24       	eor	r1, r1
 976:	8f 93       	push	r24
	if(prescaler) prescaler--;
 978:	80 91 73 00 	lds	r24, 0x0073
 97c:	88 23       	and	r24, r24
 97e:	21 f0       	breq	.+8      	; 0x988 <__vector_11+0x1c>
 980:	81 50       	subi	r24, 0x01	; 1
 982:	80 93 73 00 	sts	0x0073, r24
 986:	06 c0       	rjmp	.+12     	; 0x994 <__vector_11+0x28>
	else{
		prescaler = DIV_SPEED_TIMER;
 988:	88 e2       	ldi	r24, 0x28	; 40
 98a:	80 93 73 00 	sts	0x0073, r24
		doUpdate = 1;
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	80 93 70 00 	sts	0x0070, r24
	}
 994:	8f 91       	pop	r24
 996:	0f 90       	pop	r0
 998:	0f be       	out	0x3f, r0	; 63
 99a:	0f 90       	pop	r0
 99c:	1f 90       	pop	r1
 99e:	18 95       	reti

000009a0 <__udivmodhi4>:
 9a0:	aa 1b       	sub	r26, r26
 9a2:	bb 1b       	sub	r27, r27
 9a4:	51 e1       	ldi	r21, 0x11	; 17
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__udivmodhi4_ep>

000009a8 <__udivmodhi4_loop>:
 9a8:	aa 1f       	adc	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	a6 17       	cp	r26, r22
 9ae:	b7 07       	cpc	r27, r23
 9b0:	10 f0       	brcs	.+4      	; 0x9b6 <__udivmodhi4_ep>
 9b2:	a6 1b       	sub	r26, r22
 9b4:	b7 0b       	sbc	r27, r23

000009b6 <__udivmodhi4_ep>:
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	5a 95       	dec	r21
 9bc:	a9 f7       	brne	.-22     	; 0x9a8 <__udivmodhi4_loop>
 9be:	80 95       	com	r24
 9c0:	90 95       	com	r25
 9c2:	bc 01       	movw	r22, r24
 9c4:	cd 01       	movw	r24, r26
 9c6:	08 95       	ret

000009c8 <__divmodsi4>:
 9c8:	05 2e       	mov	r0, r21
 9ca:	97 fb       	bst	r25, 7
 9cc:	1e f4       	brtc	.+6      	; 0x9d4 <__divmodsi4+0xc>
 9ce:	00 94       	com	r0
 9d0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__negsi2>
 9d4:	57 fd       	sbrc	r21, 7
 9d6:	07 d0       	rcall	.+14     	; 0x9e6 <__divmodsi4_neg2>
 9d8:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__udivmodsi4>
 9dc:	07 fc       	sbrc	r0, 7
 9de:	03 d0       	rcall	.+6      	; 0x9e6 <__divmodsi4_neg2>
 9e0:	4e f4       	brtc	.+18     	; 0x9f4 <__divmodsi4_exit>
 9e2:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__negsi2>

000009e6 <__divmodsi4_neg2>:
 9e6:	50 95       	com	r21
 9e8:	40 95       	com	r20
 9ea:	30 95       	com	r19
 9ec:	21 95       	neg	r18
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	4f 4f       	sbci	r20, 0xFF	; 255
 9f2:	5f 4f       	sbci	r21, 0xFF	; 255

000009f4 <__divmodsi4_exit>:
 9f4:	08 95       	ret

000009f6 <__negsi2>:
 9f6:	90 95       	com	r25
 9f8:	80 95       	com	r24
 9fa:	70 95       	com	r23
 9fc:	61 95       	neg	r22
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	08 95       	ret

00000a06 <__muluhisi3>:
 a06:	0e 94 30 05 	call	0xa60	; 0xa60 <__umulhisi3>
 a0a:	a5 9f       	mul	r26, r21
 a0c:	90 0d       	add	r25, r0
 a0e:	b4 9f       	mul	r27, r20
 a10:	90 0d       	add	r25, r0
 a12:	a4 9f       	mul	r26, r20
 a14:	80 0d       	add	r24, r0
 a16:	91 1d       	adc	r25, r1
 a18:	11 24       	eor	r1, r1
 a1a:	08 95       	ret

00000a1c <__udivmodsi4>:
 a1c:	a1 e2       	ldi	r26, 0x21	; 33
 a1e:	1a 2e       	mov	r1, r26
 a20:	aa 1b       	sub	r26, r26
 a22:	bb 1b       	sub	r27, r27
 a24:	fd 01       	movw	r30, r26
 a26:	0d c0       	rjmp	.+26     	; 0xa42 <__udivmodsi4_ep>

00000a28 <__udivmodsi4_loop>:
 a28:	aa 1f       	adc	r26, r26
 a2a:	bb 1f       	adc	r27, r27
 a2c:	ee 1f       	adc	r30, r30
 a2e:	ff 1f       	adc	r31, r31
 a30:	a2 17       	cp	r26, r18
 a32:	b3 07       	cpc	r27, r19
 a34:	e4 07       	cpc	r30, r20
 a36:	f5 07       	cpc	r31, r21
 a38:	20 f0       	brcs	.+8      	; 0xa42 <__udivmodsi4_ep>
 a3a:	a2 1b       	sub	r26, r18
 a3c:	b3 0b       	sbc	r27, r19
 a3e:	e4 0b       	sbc	r30, r20
 a40:	f5 0b       	sbc	r31, r21

00000a42 <__udivmodsi4_ep>:
 a42:	66 1f       	adc	r22, r22
 a44:	77 1f       	adc	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	1a 94       	dec	r1
 a4c:	69 f7       	brne	.-38     	; 0xa28 <__udivmodsi4_loop>
 a4e:	60 95       	com	r22
 a50:	70 95       	com	r23
 a52:	80 95       	com	r24
 a54:	90 95       	com	r25
 a56:	9b 01       	movw	r18, r22
 a58:	ac 01       	movw	r20, r24
 a5a:	bd 01       	movw	r22, r26
 a5c:	cf 01       	movw	r24, r30
 a5e:	08 95       	ret

00000a60 <__umulhisi3>:
 a60:	a2 9f       	mul	r26, r18
 a62:	b0 01       	movw	r22, r0
 a64:	b3 9f       	mul	r27, r19
 a66:	c0 01       	movw	r24, r0
 a68:	a3 9f       	mul	r26, r19
 a6a:	70 0d       	add	r23, r0
 a6c:	81 1d       	adc	r24, r1
 a6e:	11 24       	eor	r1, r1
 a70:	91 1d       	adc	r25, r1
 a72:	b2 9f       	mul	r27, r18
 a74:	70 0d       	add	r23, r0
 a76:	81 1d       	adc	r24, r1
 a78:	11 24       	eor	r1, r1
 a7a:	91 1d       	adc	r25, r1
 a7c:	08 95       	ret

00000a7e <_exit>:
 a7e:	f8 94       	cli

00000a80 <__stop_program>:
 a80:	ff cf       	rjmp	.-2      	; 0xa80 <__stop_program>
