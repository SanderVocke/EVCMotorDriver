
EVCMotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b0a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000c1  00800060  00800060  00000b7e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d7e  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000034d  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000440  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000028c  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000430  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000008a5  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  000030e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_1>
   8:	0c 94 97 04 	jmp	0x92e	; 0x92e <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	21 e0       	ldi	r18, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 32       	cpi	r26, 0x21	; 33
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  74:	0c 94 83 05 	jmp	0xb06	; 0xb06 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <onIN1>:
    }
}

//input handlers
void onIN1(void){ //switches between (stop, forward, backward).
	if(getMotorSpeed(LEFT_MOTOR) == 0){
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <getMotorSpeed>
  82:	81 11       	cpse	r24, r1
  84:	08 c0       	rjmp	.+16     	; 0x96 <onIN1+0x1a>
		setMotorDirection(LEFT_MOTOR, FORWARD);
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setMotorDirection>
		setMotorSpeed(LEFT_MOTOR, 50);
  8c:	62 e3       	ldi	r22, 0x32	; 50
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 4d 01 	call	0x29a	; 0x29a <setMotorSpeed>
  94:	0d c0       	rjmp	.+26     	; 0xb0 <onIN1+0x34>
	}
	else if(getMotorDirection(LEFT_MOTOR) == FORWARD) setMotorDirection(LEFT_MOTOR, BACKWARD);
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 65 01 	call	0x2ca	; 0x2ca <getMotorDirection>
  9c:	81 11       	cpse	r24, r1
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <onIN1+0x2c>
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setMotorDirection>
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <onIN1+0x34>
	else setMotorSpeed(LEFT_MOTOR, 0);
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 4d 01 	call	0x29a	; 0x29a <setMotorSpeed>
	
	if(getMotorSpeed(RIGHT_MOTOR) == 0){
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <getMotorSpeed>
  b6:	81 11       	cpse	r24, r1
  b8:	09 c0       	rjmp	.+18     	; 0xcc <onIN1+0x50>
		setMotorDirection(RIGHT_MOTOR, FORWARD);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setMotorDirection>
		setMotorSpeed(RIGHT_MOTOR, 50);
  c2:	62 e3       	ldi	r22, 0x32	; 50
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 4d 01 	call	0x29a	; 0x29a <setMotorSpeed>
  ca:	08 95       	ret
	}
	else if(getMotorDirection(RIGHT_MOTOR) == FORWARD) setMotorDirection(RIGHT_MOTOR, BACKWARD);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <getMotorDirection>
  d2:	81 11       	cpse	r24, r1
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <onIN1+0x64>
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setMotorDirection>
  de:	08 95       	ret
	else setMotorSpeed(RIGHT_MOTOR, 0);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 4d 01 	call	0x29a	; 0x29a <setMotorSpeed>
  e8:	08 95       	ret

000000ea <onIN2>:
}
void onIN2(void){ //change speed
	t_speed_left += 20;
  ea:	80 91 91 00 	lds	r24, 0x0091
  ee:	8c 5e       	subi	r24, 0xEC	; 236
  f0:	80 93 91 00 	sts	0x0091, r24
	t_speed_right += 20;
  f4:	80 91 73 00 	lds	r24, 0x0073
  f8:	8c 5e       	subi	r24, 0xEC	; 236
  fa:	80 93 73 00 	sts	0x0073, r24
  fe:	08 95       	ret

00000100 <updateInputs>:
}

void updateInputs(void){
	if(PINA & 0b00000100) IN1down = 0; //IN1 is up
 100:	ca 9b       	sbis	0x19, 2	; 25
 102:	03 c0       	rjmp	.+6      	; 0x10a <updateInputs+0xa>
 104:	10 92 63 00 	sts	0x0063, r1
 108:	09 c0       	rjmp	.+18     	; 0x11c <updateInputs+0x1c>
	else{ //IN1 is down
		if(!IN1down) onIN1();
 10a:	80 91 63 00 	lds	r24, 0x0063
 10e:	81 11       	cpse	r24, r1
 110:	02 c0       	rjmp	.+4      	; 0x116 <updateInputs+0x16>
 112:	0e 94 3e 00 	call	0x7c	; 0x7c <onIN1>
		IN1down = 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 63 00 	sts	0x0063, r24
	}
	if(PINA & 0b00001000) IN2down = 0; //IN2 is up
 11c:	cb 9b       	sbis	0x19, 3	; 25
 11e:	03 c0       	rjmp	.+6      	; 0x126 <updateInputs+0x26>
 120:	10 92 62 00 	sts	0x0062, r1
 124:	08 95       	ret
	else{ //IN2 is down
		if(!IN2down) onIN2();
 126:	80 91 62 00 	lds	r24, 0x0062
 12a:	81 11       	cpse	r24, r1
 12c:	02 c0       	rjmp	.+4      	; 0x132 <updateInputs+0x32>
 12e:	0e 94 75 00 	call	0xea	; 0xea <onIN2>
		IN2down = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 62 00 	sts	0x0062, r24
 138:	08 95       	ret

0000013a <init>:
	//Init I/O pins
	
	/* Port A:
	- pint 2 and 3: IN1 and IN2 pushbuttons, respectively
	*/
	PORTA |= 0b00001100; //enable pull-ups on PA2/PA3
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	8c 60       	ori	r24, 0x0C	; 12
 13e:	8b bb       	out	0x1b, r24	; 27
	
	//Init I2C slave mode
	TWAR = (I2C_SLAVE_ADDR<<1)|1; //slave addr (bits 7-1) and respond to general call
 140:	87 e1       	ldi	r24, 0x17	; 23
 142:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWIE); //slave mode config
 144:	85 e4       	ldi	r24, 0x45	; 69
 146:	86 bf       	out	0x36, r24	; 54
	
	initMotors();
 148:	0e 94 ad 01 	call	0x35a	; 0x35a <initMotors>
	
	//global interrupts
	sei();
 14c:	78 94       	sei
 14e:	08 95       	ret

00000150 <main>:
void updateInputs(void);
void init(void);

int main(void)
{	
	init();
 150:	0e 94 9d 00 	call	0x13a	; 0x13a <init>
	
    while(1){
#ifndef OPEN_LOOP_CONTROL
		updateSpeed();
 154:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <updateSpeed>
#endif
		updateInputs();
 158:	0e 94 80 00 	call	0x100	; 0x100 <updateInputs>
 15c:	fb cf       	rjmp	.-10     	; 0x154 <main+0x4>

0000015e <processI2CByte>:
	//global interrupts
	sei();
}

void processI2CByte(){
	uint8_t byte = TWDR;
 15e:	93 b1       	in	r25, 0x03	; 3
	//first byte: selects motor and direction.	
	if(i2c_r_index==0){
 160:	80 91 69 00 	lds	r24, 0x0069
 164:	81 11       	cpse	r24, r1
 166:	0c c0       	rjmp	.+24     	; 0x180 <processI2CByte+0x22>
		i2c_motor = (byte & MOTOR_BIT) ? LEFT_MOTOR : RIGHT_MOTOR;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	91 fb       	bst	r25, 1
 16c:	22 27       	eor	r18, r18
 16e:	20 f9       	bld	r18, 0
 170:	28 27       	eor	r18, r24
 172:	20 93 61 00 	sts	0x0061, r18
		i2c_direction = (byte & DIRECTION_BIT) ? FORWARD : BACKWARD;		
 176:	98 27       	eor	r25, r24
 178:	91 70       	andi	r25, 0x01	; 1
 17a:	90 93 60 00 	sts	0x0060, r25
 17e:	08 95       	ret
	}
	else if(i2c_r_index==1){
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	31 f4       	brne	.+12     	; 0x190 <processI2CByte+0x32>
		setMotorDirection(i2c_motor, i2c_direction);
 184:	60 91 60 00 	lds	r22, 0x0060
 188:	80 91 61 00 	lds	r24, 0x0061
 18c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setMotorDirection>
 190:	08 95       	ret

00000192 <__vector_19>:
#endif
	}
}

//interrupt handler for I2C slave operation
ISR(TWI_vect){	
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	cf 93       	push	r28
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	uint8_t sreg_save = SREG;
 1b6:	cf b7       	in	r28, 0x3f	; 63
	cli();
 1b8:	f8 94       	cli
	switch(TW_STATUS){
 1ba:	81 b1       	in	r24, 0x01	; 1
 1bc:	88 7f       	andi	r24, 0xF8	; 248
 1be:	88 38       	cpi	r24, 0x88	; 136
 1c0:	a1 f1       	breq	.+104    	; 0x22a <__vector_19+0x98>
 1c2:	60 f4       	brcc	.+24     	; 0x1dc <__vector_19+0x4a>
 1c4:	80 36       	cpi	r24, 0x60	; 96
 1c6:	b9 f0       	breq	.+46     	; 0x1f6 <__vector_19+0x64>
 1c8:	20 f4       	brcc	.+8      	; 0x1d2 <__vector_19+0x40>
 1ca:	88 23       	and	r24, r24
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <__vector_19+0x3e>
 1ce:	50 c0       	rjmp	.+160    	; 0x270 <__vector_19+0xde>
 1d0:	51 c0       	rjmp	.+162    	; 0x274 <__vector_19+0xe2>
 1d2:	88 36       	cpi	r24, 0x68	; 104
 1d4:	21 f1       	breq	.+72     	; 0x21e <__vector_19+0x8c>
 1d6:	80 38       	cpi	r24, 0x80	; 128
 1d8:	99 f0       	breq	.+38     	; 0x200 <__vector_19+0x6e>
 1da:	4c c0       	rjmp	.+152    	; 0x274 <__vector_19+0xe2>
 1dc:	88 3b       	cpi	r24, 0xB8	; 184
 1de:	89 f1       	breq	.+98     	; 0x242 <__vector_19+0xb0>
 1e0:	28 f4       	brcc	.+10     	; 0x1ec <__vector_19+0x5a>
 1e2:	80 3a       	cpi	r24, 0xA0	; 160
 1e4:	f9 f0       	breq	.+62     	; 0x224 <__vector_19+0x92>
 1e6:	88 3a       	cpi	r24, 0xA8	; 168
 1e8:	19 f1       	breq	.+70     	; 0x230 <__vector_19+0x9e>
 1ea:	44 c0       	rjmp	.+136    	; 0x274 <__vector_19+0xe2>
 1ec:	80 3c       	cpi	r24, 0xC0	; 192
 1ee:	e9 f1       	breq	.+122    	; 0x26a <__vector_19+0xd8>
 1f0:	88 3c       	cpi	r24, 0xC8	; 200
 1f2:	d9 f1       	breq	.+118    	; 0x26a <__vector_19+0xd8>
 1f4:	3f c0       	rjmp	.+126    	; 0x274 <__vector_19+0xe2>
		//--------------Slave receiver------------------------------------
		//SLA_W received and acked, prepare for data receiving
		case 0x60:
		TWACK;
 1f6:	85 ec       	ldi	r24, 0xC5	; 197
 1f8:	86 bf       	out	0x36, r24	; 54
		i2c_r_index = 0;
 1fa:	10 92 69 00 	sts	0x0069, r1
		break;
 1fe:	3a c0       	rjmp	.+116    	; 0x274 <__vector_19+0xe2>
		case 0x80:  //a byte was received, store it and
		//setup the buffer to recieve another
		//i2c_r[i2c_r_index] = TWDR;
		processI2CByte();
 200:	0e 94 af 00 	call	0x15e	; 0x15e <processI2CByte>
		i2c_r_index++;
 204:	80 91 69 00 	lds	r24, 0x0069
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 69 00 	sts	0x0069, r24
		//don't ack next data if buffer is full
		if(i2c_r_index >= I2C_BUFSIZE_RECV){
 20e:	86 30       	cpi	r24, 0x06	; 6
 210:	18 f0       	brcs	.+6      	; 0x218 <__vector_19+0x86>
			TWNACK;
 212:	85 e8       	ldi	r24, 0x85	; 133
 214:	86 bf       	out	0x36, r24	; 54
 216:	2e c0       	rjmp	.+92     	; 0x274 <__vector_19+0xe2>
			}else {
			TWACK;
 218:	85 ec       	ldi	r24, 0xC5	; 197
 21a:	86 bf       	out	0x36, r24	; 54
 21c:	2b c0       	rjmp	.+86     	; 0x274 <__vector_19+0xe2>
		}
		break;
		case 0x68://adressed as slave while in master mode.
		//should never happen, better reset;
		i2c_rst=1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 68 00 	sts	0x0068, r24
		case 0xA0: //Stop or rep start, reset state machine
		TWACK;
 224:	85 ec       	ldi	r24, 0xC5	; 197
 226:	86 bf       	out	0x36, r24	; 54
		break;
 228:	25 c0       	rjmp	.+74     	; 0x274 <__vector_19+0xe2>
		//-------------- error recovery ----------------------------------
		case 0x88: //data received  but not acked
		//should not happen if the master is behaving as expected
		//switch to not adressed mode
		TWACK;
 22a:	85 ec       	ldi	r24, 0xC5	; 197
 22c:	86 bf       	out	0x36, r24	; 54
		break;
 22e:	22 c0       	rjmp	.+68     	; 0x274 <__vector_19+0xe2>
		//---------------Slave Transmitter--------------------------------
		case 0xA8:  //SLA R received, prep for transmission
		//and load first data
		i2c_t_index=1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 67 00 	sts	0x0067, r24
		TWDR = i2c_t[0];
 236:	80 91 64 00 	lds	r24, 0x0064
 23a:	83 b9       	out	0x03, r24	; 3
		TWACK;
 23c:	85 ec       	ldi	r24, 0xC5	; 197
 23e:	86 bf       	out	0x36, r24	; 54
		break;
 240:	19 c0       	rjmp	.+50     	; 0x274 <__vector_19+0xe2>
		case 0xB8:  //data transmitted and acked by master, load next
		TWDR = i2c_t[i2c_t_index];
 242:	e0 91 67 00 	lds	r30, 0x0067
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 59       	subi	r30, 0x9C	; 156
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	80 81       	ld	r24, Z
 24e:	83 b9       	out	0x03, r24	; 3
		i2c_t_index++;
 250:	80 91 67 00 	lds	r24, 0x0067
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	80 93 67 00 	sts	0x0067, r24
		//designate last byte if we're at the end of the buffer
		if(i2c_t_index >= I2C_BUFSIZE_TRAN) TWNACK;
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	18 f0       	brcs	.+6      	; 0x264 <__vector_19+0xd2>
 25e:	85 e8       	ldi	r24, 0x85	; 133
 260:	86 bf       	out	0x36, r24	; 54
 262:	08 c0       	rjmp	.+16     	; 0x274 <__vector_19+0xe2>
		else TWACK;
 264:	85 ec       	ldi	r24, 0xC5	; 197
 266:	86 bf       	out	0x36, r24	; 54
 268:	05 c0       	rjmp	.+10     	; 0x274 <__vector_19+0xe2>
		case 0xC8: //last byte send and acked by master
		//last bytes should not be acked, ignore till start/stop
		//reset=1;
		case 0xC0: //last byte send and nacked by master
		//(as should be)
		TWACK;
 26a:	85 ec       	ldi	r24, 0xC5	; 197
 26c:	86 bf       	out	0x36, r24	; 54
		break;
 26e:	02 c0       	rjmp	.+4      	; 0x274 <__vector_19+0xe2>
		//--------------------- bus error---------------------------------
		//illegal start or stop received, reset the I2C hardware
		case 0x00:
		TWRESET;
 270:	85 ed       	ldi	r24, 0xD5	; 213
 272:	86 bf       	out	0x36, r24	; 54
		break;
	}
	SREG = sreg_save;
 274:	cf bf       	out	0x3f, r28	; 63
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	cf 91       	pop	r28
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <setMotorSpeed>:
	TIMSK |= 0b00000001; //enable overflow interrupt
	#endif
}

void setMotorSpeed(motor_t motor, uint8_t speed){
	switch(motor){
 29a:	88 23       	and	r24, r24
 29c:	19 f0       	breq	.+6      	; 0x2a4 <setMotorSpeed+0xa>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	21 f0       	breq	.+8      	; 0x2aa <setMotorSpeed+0x10>
 2a2:	08 95       	ret
		case LEFT_MOTOR:
		t_speed_left = speed;
 2a4:	60 93 91 00 	sts	0x0091, r22
		break;
 2a8:	08 95       	ret
		case RIGHT_MOTOR:
		t_speed_right = speed;
 2aa:	60 93 73 00 	sts	0x0073, r22
 2ae:	08 95       	ret

000002b0 <getMotorSpeed>:
		break;
	}
}

uint8_t getMotorSpeed(motor_t motor){
	switch(motor){
 2b0:	88 23       	and	r24, r24
 2b2:	19 f0       	breq	.+6      	; 0x2ba <getMotorSpeed+0xa>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	21 f0       	breq	.+8      	; 0x2c0 <getMotorSpeed+0x10>
 2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <getMotorSpeed+0x16>
		case LEFT_MOTOR:
		return t_speed_left;
 2ba:	80 91 91 00 	lds	r24, 0x0091
 2be:	08 95       	ret
		break;
		case RIGHT_MOTOR:
		return t_speed_right;
 2c0:	80 91 73 00 	lds	r24, 0x0073
 2c4:	08 95       	ret
		break;
	}	
	return 0;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
}
 2c8:	08 95       	ret

000002ca <getMotorDirection>:
		break;
	}
}

direction_t getMotorDirection(motor_t motor){
	switch(motor){
 2ca:	88 23       	and	r24, r24
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <getMotorDirection+0xa>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	29 f0       	breq	.+10     	; 0x2dc <getMotorDirection+0x12>
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <getMotorDirection+0x1a>
		case LEFT_MOTOR:
		return (PORTA & 0b00000001) ? FORWARD : BACKWARD;
 2d4:	8b b3       	in	r24, 0x1b	; 27
 2d6:	80 95       	com	r24
 2d8:	81 70       	andi	r24, 0x01	; 1
 2da:	08 95       	ret
		break;
		case RIGHT_MOTOR:
		return (PORTA & 0b00000010) ? BACKWARD : FORWARD;
 2dc:	8b b3       	in	r24, 0x1b	; 27
 2de:	86 95       	lsr	r24
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	08 95       	ret
		break;
	}
	return FORWARD;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
}
 2e6:	08 95       	ret

000002e8 <setMotorDirection>:

void setMotorDirection(motor_t motor, direction_t direction){
	switch(motor){
 2e8:	88 23       	and	r24, r24
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <setMotorDirection+0xa>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	d9 f0       	breq	.+54     	; 0x326 <setMotorDirection+0x3e>
 2f0:	08 95       	ret
		case LEFT_MOTOR:
		if(direction != left_dir){
 2f2:	80 91 71 00 	lds	r24, 0x0071
 2f6:	68 17       	cp	r22, r24
 2f8:	71 f0       	breq	.+28     	; 0x316 <setMotorDirection+0x2e>
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 2fa:	10 92 88 00 	sts	0x0088, r1
		OCR1A = 255-duty;
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	9b bd       	out	0x2b, r25	; 43
 304:	8a bd       	out	0x2a, r24	; 42
void setMotorDirection(motor_t motor, direction_t direction){
	switch(motor){
		case LEFT_MOTOR:
		if(direction != left_dir){
			setMotorDuty(LEFT_MOTOR, 0); //stop if changing direction
			I_left = 0; //reset error
 306:	10 92 7d 00 	sts	0x007D, r1
 30a:	10 92 7e 00 	sts	0x007E, r1
 30e:	10 92 7f 00 	sts	0x007F, r1
 312:	10 92 80 00 	sts	0x0080, r1
		}
		if(direction==FORWARD) PORTA |= 0b00000001;
 316:	61 11       	cpse	r22, r1
 318:	02 c0       	rjmp	.+4      	; 0x31e <setMotorDirection+0x36>
 31a:	d8 9a       	sbi	0x1b, 0	; 27
 31c:	01 c0       	rjmp	.+2      	; 0x320 <setMotorDirection+0x38>
		else PORTA &= 0b11111110;
 31e:	d8 98       	cbi	0x1b, 0	; 27
		left_dir = direction;
 320:	60 93 71 00 	sts	0x0071, r22
		break;
 324:	08 95       	ret
		case RIGHT_MOTOR:
		if(direction != right_dir){
 326:	80 91 96 00 	lds	r24, 0x0096
 32a:	68 17       	cp	r22, r24
 32c:	71 f0       	breq	.+28     	; 0x34a <setMotorDirection+0x62>
		case LEFT_MOTOR:
		duty_left = duty;
		OCR1A = 255-duty;
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 32e:	10 92 1e 01 	sts	0x011E, r1
		OCR1B =255-duty;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	99 bd       	out	0x29, r25	; 41
 338:	88 bd       	out	0x28, r24	; 40
		left_dir = direction;
		break;
		case RIGHT_MOTOR:
		if(direction != right_dir){
			setMotorDuty(RIGHT_MOTOR, 0); //stop if changing direction
			I_right = 0; //reset error
 33a:	10 92 92 00 	sts	0x0092, r1
 33e:	10 92 93 00 	sts	0x0093, r1
 342:	10 92 94 00 	sts	0x0094, r1
 346:	10 92 95 00 	sts	0x0095, r1
		}
		if(direction==FORWARD) PORTA &= 0b11111101;
 34a:	61 11       	cpse	r22, r1
 34c:	02 c0       	rjmp	.+4      	; 0x352 <setMotorDirection+0x6a>
 34e:	d9 98       	cbi	0x1b, 1	; 27
 350:	01 c0       	rjmp	.+2      	; 0x354 <setMotorDirection+0x6c>
		else PORTA |= 0b00000010;
 352:	d9 9a       	sbi	0x1b, 1	; 27
		right_dir = direction;
 354:	60 93 96 00 	sts	0x0096, r22
 358:	08 95       	ret

0000035a <initMotors>:
#include <avr/interrupt.h>
#include <util/twi.h>

void initMotors(void){
	//control globals: measurement
	intref_left[0] = intref_left[1] = intref_left[2] = 0;
 35a:	10 92 8b 00 	sts	0x008B, r1
 35e:	10 92 8a 00 	sts	0x008A, r1
 362:	10 92 89 00 	sts	0x0089, r1
	intref_right[0] = intref_right[1] = intref_right[2] = 0;
 366:	10 92 1d 01 	sts	0x011D, r1
 36a:	10 92 1c 01 	sts	0x011C, r1
 36e:	10 92 1b 01 	sts	0x011B, r1
	lastangle_right = 0;
 372:	10 92 20 01 	sts	0x0120, r1
 376:	10 92 1f 01 	sts	0x011F, r1
	lastangle_left = 0;
 37a:	10 92 6f 00 	sts	0x006F, r1
 37e:	10 92 6e 00 	sts	0x006E, r1
	do_ticks=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 85 00 	sts	0x0085, r24
	ticks_right = 0;
 388:	10 92 76 00 	sts	0x0076, r1
	ticks_left = 0;
 38c:	10 92 87 00 	sts	0x0087, r1
	prescaler = DIV_SPEED_TIMER;
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	80 93 74 00 	sts	0x0074, r24
	doUpdate = 0;
 396:	10 92 70 00 	sts	0x0070, r1
	#ifdef STORE_ANGLES
	i_angles_left = 0;
 39a:	10 92 72 00 	sts	0x0072, r1
	i_angles_right = 0;
 39e:	10 92 8c 00 	sts	0x008C, r1
	#endif

	//control globals: PID
	t_speed_left = 0;
 3a2:	10 92 91 00 	sts	0x0091, r1
	t_speed_right = 0;
 3a6:	10 92 73 00 	sts	0x0073, r1
	speed_left = 0;
 3aa:	10 92 86 00 	sts	0x0086, r1
	speed_right = 0;
 3ae:	10 92 75 00 	sts	0x0075, r1
	duty_left = 0;
 3b2:	10 92 88 00 	sts	0x0088, r1
	duty_right = 0;
 3b6:	10 92 1e 01 	sts	0x011E, r1
	left_dir = FORWARD;
 3ba:	10 92 71 00 	sts	0x0071, r1
	right_dir = FORWARD;
 3be:	10 92 96 00 	sts	0x0096, r1
	I_left = 0;
 3c2:	10 92 7d 00 	sts	0x007D, r1
 3c6:	10 92 7e 00 	sts	0x007E, r1
 3ca:	10 92 7f 00 	sts	0x007F, r1
 3ce:	10 92 80 00 	sts	0x0080, r1
	I_right = 0;
 3d2:	10 92 92 00 	sts	0x0092, r1
 3d6:	10 92 93 00 	sts	0x0093, r1
 3da:	10 92 94 00 	sts	0x0094, r1
 3de:	10 92 95 00 	sts	0x0095, r1
	//Init I/O pins
	
	/* Port A:
	- pins 0 and 1: direction outputs to motor controller (CW/CCW).
	*/
	DDRA |= 0b00000011;
 3e2:	8a b3       	in	r24, 0x1a	; 26
 3e4:	83 60       	ori	r24, 0x03	; 3
 3e6:	8a bb       	out	0x1a, r24	; 26
	
	/* Port D:
	- pins 4 and 5: PWM outputs to motor controller.
	- pins 2 and 3: PWM (interrupt) inputs from angle sensors.
	*/
	DDRD |= 0b00110000;
 3e8:	81 b3       	in	r24, 0x11	; 17
 3ea:	80 63       	ori	r24, 0x30	; 48
 3ec:	81 bb       	out	0x11, r24	; 17
	
	//Init Motor Parameters
	setMotorDirection(LEFT_MOTOR, FORWARD);
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setMotorDirection>
	setMotorDirection(RIGHT_MOTOR, BACKWARD);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setMotorDirection>
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 3fe:	10 92 88 00 	sts	0x0088, r1
		OCR1A = 255-duty;
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	9b bd       	out	0x2b, r25	; 43
 408:	8a bd       	out	0x2a, r24	; 42
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 40a:	10 92 1e 01 	sts	0x011E, r1
		OCR1B =255-duty;
 40e:	99 bd       	out	0x29, r25	; 41
 410:	88 bd       	out	0x28, r24	; 40
}

void setMotorSpeed(motor_t motor, uint8_t speed){
	switch(motor){
		case LEFT_MOTOR:
		t_speed_left = speed;
 412:	10 92 91 00 	sts	0x0091, r1
		break;
		case RIGHT_MOTOR:
		t_speed_right = speed;
 416:	10 92 73 00 	sts	0x0073, r1
	setMotorSpeed(RIGHT_MOTOR, 0);
#endif
	
	//Init Timers	
	//Timer/Counter1: For 100kHz PWM to motor driver.
	TCCR1A = 0b11110001; //Fast PWM mode, inverting
 41a:	81 ef       	ldi	r24, 0xF1	; 241
 41c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001001; //Fast PWM mode, system clock source	
 41e:	89 e0       	ldi	r24, 0x09	; 9
 420:	8e bd       	out	0x2e, r24	; 46
	
	#ifndef OPEN_LOOP_CONTROL //if doing PID
	//Init external interrupts (PWM inputs)
	MCUCR |= 0b00000101; //any edge causes interrupt
 422:	85 b7       	in	r24, 0x35	; 53
 424:	85 60       	ori	r24, 0x05	; 5
 426:	85 bf       	out	0x35, r24	; 53
	GICR |= 0b11000000; //enable INTO and INT1
 428:	8b b7       	in	r24, 0x3b	; 59
 42a:	80 6c       	ori	r24, 0xC0	; 192
 42c:	8b bf       	out	0x3b, r24	; 59
	TCNT0 = 0; //reset timer 0 (right wheel)
 42e:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0b00000010; //clk/8 = almost 500Hz overflow rate for the timer that times PWM. Starts timer.
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000001; //enable overflow interrupt
 434:	89 b7       	in	r24, 0x39	; 57
 436:	81 60       	ori	r24, 0x01	; 1
 438:	89 bf       	out	0x39, r24	; 57
 43a:	08 95       	ret

0000043c <doPID>:
		right_dir = direction;
		break;
	}
}

void doPID(){
 43c:	4f 92       	push	r4
 43e:	5f 92       	push	r5
 440:	6f 92       	push	r6
 442:	7f 92       	push	r7
 444:	8f 92       	push	r8
 446:	9f 92       	push	r9
 448:	af 92       	push	r10
 44a:	bf 92       	push	r11
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
	if(t_speed_left <= MIN_SPEED) setMotorDuty(LEFT_MOTOR, 0);
 458:	80 91 91 00 	lds	r24, 0x0091
 45c:	85 31       	cpi	r24, 0x15	; 21
 45e:	38 f4       	brcc	.+14     	; 0x46e <doPID+0x32>
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 460:	10 92 88 00 	sts	0x0088, r1
		OCR1A = 255-duty;
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	9b bd       	out	0x2b, r25	; 43
 46a:	8a bd       	out	0x2a, r24	; 42
 46c:	d5 c0       	rjmp	.+426    	; 0x618 <doPID+0x1dc>
}

void doPID(){
	if(t_speed_left <= MIN_SPEED) setMotorDuty(LEFT_MOTOR, 0);
	else{
		error = (int32_t)t_speed_left - (int32_t)speed_left;
 46e:	c8 2e       	mov	r12, r24
 470:	d1 2c       	mov	r13, r1
 472:	e1 2c       	mov	r14, r1
 474:	f1 2c       	mov	r15, r1
 476:	80 91 86 00 	lds	r24, 0x0086
 47a:	c8 1a       	sub	r12, r24
 47c:	d1 08       	sbc	r13, r1
 47e:	e1 08       	sbc	r14, r1
 480:	f1 08       	sbc	r15, r1
 482:	c0 92 17 01 	sts	0x0117, r12
 486:	d0 92 18 01 	sts	0x0118, r13
 48a:	e0 92 19 01 	sts	0x0119, r14
 48e:	f0 92 1a 01 	sts	0x011A, r15
		I_left += error;
 492:	80 91 7d 00 	lds	r24, 0x007D
 496:	90 91 7e 00 	lds	r25, 0x007E
 49a:	a0 91 7f 00 	lds	r26, 0x007F
 49e:	b0 91 80 00 	lds	r27, 0x0080
 4a2:	8c 0d       	add	r24, r12
 4a4:	9d 1d       	adc	r25, r13
 4a6:	ae 1d       	adc	r26, r14
 4a8:	bf 1d       	adc	r27, r15
 4aa:	80 93 7d 00 	sts	0x007D, r24
 4ae:	90 93 7e 00 	sts	0x007E, r25
 4b2:	a0 93 7f 00 	sts	0x007F, r26
 4b6:	b0 93 80 00 	sts	0x0080, r27
		if(I_left > I_CAP) I_left = I_CAP;
 4ba:	89 3e       	cpi	r24, 0xE9	; 233
 4bc:	03 e0       	ldi	r16, 0x03	; 3
 4be:	90 07       	cpc	r25, r16
 4c0:	a1 05       	cpc	r26, r1
 4c2:	b1 05       	cpc	r27, r1
 4c4:	6c f0       	brlt	.+26     	; 0x4e0 <doPID+0xa4>
 4c6:	88 ee       	ldi	r24, 0xE8	; 232
 4c8:	93 e0       	ldi	r25, 0x03	; 3
 4ca:	a0 e0       	ldi	r26, 0x00	; 0
 4cc:	b0 e0       	ldi	r27, 0x00	; 0
 4ce:	80 93 7d 00 	sts	0x007D, r24
 4d2:	90 93 7e 00 	sts	0x007E, r25
 4d6:	a0 93 7f 00 	sts	0x007F, r26
 4da:	b0 93 80 00 	sts	0x0080, r27
 4de:	11 c0       	rjmp	.+34     	; 0x502 <doPID+0xc6>
		if(I_left < (-I_CAP)) I_left = -I_CAP;
 4e0:	88 31       	cpi	r24, 0x18	; 24
 4e2:	9c 4f       	sbci	r25, 0xFC	; 252
 4e4:	af 4f       	sbci	r26, 0xFF	; 255
 4e6:	bf 4f       	sbci	r27, 0xFF	; 255
 4e8:	64 f4       	brge	.+24     	; 0x502 <doPID+0xc6>
 4ea:	88 e1       	ldi	r24, 0x18	; 24
 4ec:	9c ef       	ldi	r25, 0xFC	; 252
 4ee:	af ef       	ldi	r26, 0xFF	; 255
 4f0:	bf ef       	ldi	r27, 0xFF	; 255
 4f2:	80 93 7d 00 	sts	0x007D, r24
 4f6:	90 93 7e 00 	sts	0x007E, r25
 4fa:	a0 93 7f 00 	sts	0x007F, r26
 4fe:	b0 93 80 00 	sts	0x0080, r27
		newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_left)/1000 + (D_GAIN*(error-lasterror_left))/1000 + (int16_t)getMotorDuty(LEFT_MOTOR);
 502:	a0 e2       	ldi	r26, 0x20	; 32
 504:	b3 e0       	ldi	r27, 0x03	; 3
 506:	a7 01       	movw	r20, r14
 508:	96 01       	movw	r18, r12
 50a:	0e 94 47 05 	call	0xa8e	; 0xa8e <__muluhisi3>
 50e:	0f 2e       	mov	r0, r31
 510:	f8 ee       	ldi	r31, 0xE8	; 232
 512:	8f 2e       	mov	r8, r31
 514:	f3 e0       	ldi	r31, 0x03	; 3
 516:	9f 2e       	mov	r9, r31
 518:	a1 2c       	mov	r10, r1
 51a:	b1 2c       	mov	r11, r1
 51c:	f0 2d       	mov	r31, r0
 51e:	a5 01       	movw	r20, r10
 520:	94 01       	movw	r18, r8
 522:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodsi4>
 526:	29 01       	movw	r4, r18
 528:	3a 01       	movw	r6, r20
 52a:	20 91 7d 00 	lds	r18, 0x007D
 52e:	30 91 7e 00 	lds	r19, 0x007E
 532:	40 91 7f 00 	lds	r20, 0x007F
 536:	50 91 80 00 	lds	r21, 0x0080
 53a:	a4 e6       	ldi	r26, 0x64	; 100
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	0e 94 47 05 	call	0xa8e	; 0xa8e <__muluhisi3>
 542:	a5 01       	movw	r20, r10
 544:	94 01       	movw	r18, r8
 546:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodsi4>
 54a:	42 0e       	add	r4, r18
 54c:	53 1e       	adc	r5, r19
 54e:	64 1e       	adc	r6, r20
 550:	75 1e       	adc	r7, r21
 552:	80 91 81 00 	lds	r24, 0x0081
 556:	90 91 82 00 	lds	r25, 0x0082
 55a:	a0 91 83 00 	lds	r26, 0x0083
 55e:	b0 91 84 00 	lds	r27, 0x0084
 562:	a7 01       	movw	r20, r14
 564:	96 01       	movw	r18, r12
 566:	28 1b       	sub	r18, r24
 568:	39 0b       	sbc	r19, r25
 56a:	4a 0b       	sbc	r20, r26
 56c:	5b 0b       	sbc	r21, r27
 56e:	ac e2       	ldi	r26, 0x2C	; 44
 570:	b1 e0       	ldi	r27, 0x01	; 1
 572:	0e 94 47 05 	call	0xa8e	; 0xa8e <__muluhisi3>
 576:	a5 01       	movw	r20, r10
 578:	94 01       	movw	r18, r8
 57a:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodsi4>
 57e:	ba 01       	movw	r22, r20
 580:	a9 01       	movw	r20, r18
 582:	44 0d       	add	r20, r4
 584:	55 1d       	adc	r21, r5
 586:	66 1d       	adc	r22, r6
 588:	77 1d       	adc	r23, r7
 58a:	80 91 88 00 	lds	r24, 0x0088
 58e:	8a 01       	movw	r16, r20
 590:	9b 01       	movw	r18, r22
 592:	08 0f       	add	r16, r24
 594:	11 1d       	adc	r17, r1
 596:	21 1d       	adc	r18, r1
 598:	31 1d       	adc	r19, r1
 59a:	00 93 6a 00 	sts	0x006A, r16
 59e:	10 93 6b 00 	sts	0x006B, r17
 5a2:	20 93 6c 00 	sts	0x006C, r18
 5a6:	30 93 6d 00 	sts	0x006D, r19
		if(newSpeed < 0) newSpeed = 0;
 5aa:	33 23       	and	r19, r19
 5ac:	4c f4       	brge	.+18     	; 0x5c0 <doPID+0x184>
 5ae:	10 92 6a 00 	sts	0x006A, r1
 5b2:	10 92 6b 00 	sts	0x006B, r1
 5b6:	10 92 6c 00 	sts	0x006C, r1
 5ba:	10 92 6d 00 	sts	0x006D, r1
 5be:	12 c0       	rjmp	.+36     	; 0x5e4 <doPID+0x1a8>
		if(newSpeed > 255) newSpeed = 255;
 5c0:	0f 3f       	cpi	r16, 0xFF	; 255
 5c2:	11 05       	cpc	r17, r1
 5c4:	21 05       	cpc	r18, r1
 5c6:	31 05       	cpc	r19, r1
 5c8:	69 f0       	breq	.+26     	; 0x5e4 <doPID+0x1a8>
 5ca:	64 f0       	brlt	.+24     	; 0x5e4 <doPID+0x1a8>
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	a0 e0       	ldi	r26, 0x00	; 0
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	80 93 6a 00 	sts	0x006A, r24
 5d8:	90 93 6b 00 	sts	0x006B, r25
 5dc:	a0 93 6c 00 	sts	0x006C, r26
 5e0:	b0 93 6d 00 	sts	0x006D, r27
		setMotorDuty(LEFT_MOTOR, (uint8_t)newSpeed);
 5e4:	20 91 6a 00 	lds	r18, 0x006A
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		duty_left = duty;
 5e8:	20 93 88 00 	sts	0x0088, r18
		OCR1A = 255-duty;
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	82 1b       	sub	r24, r18
 5f2:	91 09       	sbc	r25, r1
 5f4:	9b bd       	out	0x2b, r25	; 43
 5f6:	8a bd       	out	0x2a, r24	; 42
		if(I_left < (-I_CAP)) I_left = -I_CAP;
		newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_left)/1000 + (D_GAIN*(error-lasterror_left))/1000 + (int16_t)getMotorDuty(LEFT_MOTOR);
		if(newSpeed < 0) newSpeed = 0;
		if(newSpeed > 255) newSpeed = 255;
		setMotorDuty(LEFT_MOTOR, (uint8_t)newSpeed);
		lasterror_left = error;
 5f8:	80 91 17 01 	lds	r24, 0x0117
 5fc:	90 91 18 01 	lds	r25, 0x0118
 600:	a0 91 19 01 	lds	r26, 0x0119
 604:	b0 91 1a 01 	lds	r27, 0x011A
 608:	80 93 81 00 	sts	0x0081, r24
 60c:	90 93 82 00 	sts	0x0082, r25
 610:	a0 93 83 00 	sts	0x0083, r26
 614:	b0 93 84 00 	sts	0x0084, r27
	}
	
	if(t_speed_right <= MIN_SPEED) setMotorDuty(RIGHT_MOTOR, 0);
 618:	80 91 73 00 	lds	r24, 0x0073
 61c:	85 31       	cpi	r24, 0x15	; 21
 61e:	38 f4       	brcc	.+14     	; 0x62e <doPID+0x1f2>
		case LEFT_MOTOR:
		duty_left = duty;
		OCR1A = 255-duty;
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 620:	10 92 1e 01 	sts	0x011E, r1
		OCR1B =255-duty;
 624:	8f ef       	ldi	r24, 0xFF	; 255
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	99 bd       	out	0x29, r25	; 41
 62a:	88 bd       	out	0x28, r24	; 40
 62c:	d5 c0       	rjmp	.+426    	; 0x7d8 <doPID+0x39c>
		lasterror_left = error;
	}
	
	if(t_speed_right <= MIN_SPEED) setMotorDuty(RIGHT_MOTOR, 0);
	else{
		error = (int32_t)t_speed_right - (int32_t)speed_right;
 62e:	c8 2e       	mov	r12, r24
 630:	d1 2c       	mov	r13, r1
 632:	e1 2c       	mov	r14, r1
 634:	f1 2c       	mov	r15, r1
 636:	80 91 75 00 	lds	r24, 0x0075
 63a:	c8 1a       	sub	r12, r24
 63c:	d1 08       	sbc	r13, r1
 63e:	e1 08       	sbc	r14, r1
 640:	f1 08       	sbc	r15, r1
 642:	c0 92 17 01 	sts	0x0117, r12
 646:	d0 92 18 01 	sts	0x0118, r13
 64a:	e0 92 19 01 	sts	0x0119, r14
 64e:	f0 92 1a 01 	sts	0x011A, r15
		I_right += error;
 652:	80 91 92 00 	lds	r24, 0x0092
 656:	90 91 93 00 	lds	r25, 0x0093
 65a:	a0 91 94 00 	lds	r26, 0x0094
 65e:	b0 91 95 00 	lds	r27, 0x0095
 662:	8c 0d       	add	r24, r12
 664:	9d 1d       	adc	r25, r13
 666:	ae 1d       	adc	r26, r14
 668:	bf 1d       	adc	r27, r15
 66a:	80 93 92 00 	sts	0x0092, r24
 66e:	90 93 93 00 	sts	0x0093, r25
 672:	a0 93 94 00 	sts	0x0094, r26
 676:	b0 93 95 00 	sts	0x0095, r27
		if(I_right > I_CAP) I_right = I_CAP;
 67a:	89 3e       	cpi	r24, 0xE9	; 233
 67c:	13 e0       	ldi	r17, 0x03	; 3
 67e:	91 07       	cpc	r25, r17
 680:	a1 05       	cpc	r26, r1
 682:	b1 05       	cpc	r27, r1
 684:	6c f0       	brlt	.+26     	; 0x6a0 <doPID+0x264>
 686:	88 ee       	ldi	r24, 0xE8	; 232
 688:	93 e0       	ldi	r25, 0x03	; 3
 68a:	a0 e0       	ldi	r26, 0x00	; 0
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	80 93 92 00 	sts	0x0092, r24
 692:	90 93 93 00 	sts	0x0093, r25
 696:	a0 93 94 00 	sts	0x0094, r26
 69a:	b0 93 95 00 	sts	0x0095, r27
 69e:	11 c0       	rjmp	.+34     	; 0x6c2 <doPID+0x286>
		if(I_right < (-I_CAP)) I_right = -I_CAP;
 6a0:	88 31       	cpi	r24, 0x18	; 24
 6a2:	9c 4f       	sbci	r25, 0xFC	; 252
 6a4:	af 4f       	sbci	r26, 0xFF	; 255
 6a6:	bf 4f       	sbci	r27, 0xFF	; 255
 6a8:	64 f4       	brge	.+24     	; 0x6c2 <doPID+0x286>
 6aa:	88 e1       	ldi	r24, 0x18	; 24
 6ac:	9c ef       	ldi	r25, 0xFC	; 252
 6ae:	af ef       	ldi	r26, 0xFF	; 255
 6b0:	bf ef       	ldi	r27, 0xFF	; 255
 6b2:	80 93 92 00 	sts	0x0092, r24
 6b6:	90 93 93 00 	sts	0x0093, r25
 6ba:	a0 93 94 00 	sts	0x0094, r26
 6be:	b0 93 95 00 	sts	0x0095, r27
		newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_right)/1000 + (D_GAIN*(error-lasterror_right))/1000 + (int16_t)getMotorDuty(RIGHT_MOTOR);
 6c2:	a0 e2       	ldi	r26, 0x20	; 32
 6c4:	b3 e0       	ldi	r27, 0x03	; 3
 6c6:	a7 01       	movw	r20, r14
 6c8:	96 01       	movw	r18, r12
 6ca:	0e 94 47 05 	call	0xa8e	; 0xa8e <__muluhisi3>
 6ce:	0f 2e       	mov	r0, r31
 6d0:	f8 ee       	ldi	r31, 0xE8	; 232
 6d2:	8f 2e       	mov	r8, r31
 6d4:	f3 e0       	ldi	r31, 0x03	; 3
 6d6:	9f 2e       	mov	r9, r31
 6d8:	a1 2c       	mov	r10, r1
 6da:	b1 2c       	mov	r11, r1
 6dc:	f0 2d       	mov	r31, r0
 6de:	a5 01       	movw	r20, r10
 6e0:	94 01       	movw	r18, r8
 6e2:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodsi4>
 6e6:	29 01       	movw	r4, r18
 6e8:	3a 01       	movw	r6, r20
 6ea:	20 91 92 00 	lds	r18, 0x0092
 6ee:	30 91 93 00 	lds	r19, 0x0093
 6f2:	40 91 94 00 	lds	r20, 0x0094
 6f6:	50 91 95 00 	lds	r21, 0x0095
 6fa:	a4 e6       	ldi	r26, 0x64	; 100
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	0e 94 47 05 	call	0xa8e	; 0xa8e <__muluhisi3>
 702:	a5 01       	movw	r20, r10
 704:	94 01       	movw	r18, r8
 706:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodsi4>
 70a:	42 0e       	add	r4, r18
 70c:	53 1e       	adc	r5, r19
 70e:	64 1e       	adc	r6, r20
 710:	75 1e       	adc	r7, r21
 712:	80 91 8d 00 	lds	r24, 0x008D
 716:	90 91 8e 00 	lds	r25, 0x008E
 71a:	a0 91 8f 00 	lds	r26, 0x008F
 71e:	b0 91 90 00 	lds	r27, 0x0090
 722:	a7 01       	movw	r20, r14
 724:	96 01       	movw	r18, r12
 726:	28 1b       	sub	r18, r24
 728:	39 0b       	sbc	r19, r25
 72a:	4a 0b       	sbc	r20, r26
 72c:	5b 0b       	sbc	r21, r27
 72e:	ac e2       	ldi	r26, 0x2C	; 44
 730:	b1 e0       	ldi	r27, 0x01	; 1
 732:	0e 94 47 05 	call	0xa8e	; 0xa8e <__muluhisi3>
 736:	a5 01       	movw	r20, r10
 738:	94 01       	movw	r18, r8
 73a:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodsi4>
 73e:	ba 01       	movw	r22, r20
 740:	a9 01       	movw	r20, r18
 742:	44 0d       	add	r20, r4
 744:	55 1d       	adc	r21, r5
 746:	66 1d       	adc	r22, r6
 748:	77 1d       	adc	r23, r7
 74a:	80 91 1e 01 	lds	r24, 0x011E
 74e:	8a 01       	movw	r16, r20
 750:	9b 01       	movw	r18, r22
 752:	08 0f       	add	r16, r24
 754:	11 1d       	adc	r17, r1
 756:	21 1d       	adc	r18, r1
 758:	31 1d       	adc	r19, r1
 75a:	00 93 6a 00 	sts	0x006A, r16
 75e:	10 93 6b 00 	sts	0x006B, r17
 762:	20 93 6c 00 	sts	0x006C, r18
 766:	30 93 6d 00 	sts	0x006D, r19
		if(newSpeed < 0) newSpeed = 0;
 76a:	33 23       	and	r19, r19
 76c:	4c f4       	brge	.+18     	; 0x780 <doPID+0x344>
 76e:	10 92 6a 00 	sts	0x006A, r1
 772:	10 92 6b 00 	sts	0x006B, r1
 776:	10 92 6c 00 	sts	0x006C, r1
 77a:	10 92 6d 00 	sts	0x006D, r1
 77e:	12 c0       	rjmp	.+36     	; 0x7a4 <doPID+0x368>
		if(newSpeed > 255) newSpeed = 255;
 780:	0f 3f       	cpi	r16, 0xFF	; 255
 782:	11 05       	cpc	r17, r1
 784:	21 05       	cpc	r18, r1
 786:	31 05       	cpc	r19, r1
 788:	69 f0       	breq	.+26     	; 0x7a4 <doPID+0x368>
 78a:	64 f0       	brlt	.+24     	; 0x7a4 <doPID+0x368>
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	a0 e0       	ldi	r26, 0x00	; 0
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	80 93 6a 00 	sts	0x006A, r24
 798:	90 93 6b 00 	sts	0x006B, r25
 79c:	a0 93 6c 00 	sts	0x006C, r26
 7a0:	b0 93 6d 00 	sts	0x006D, r27
		setMotorDuty(RIGHT_MOTOR, (uint8_t)newSpeed);
 7a4:	20 91 6a 00 	lds	r18, 0x006A
		case LEFT_MOTOR:
		duty_left = duty;
		OCR1A = 255-duty;
		break;
		case RIGHT_MOTOR:
		duty_right = duty;
 7a8:	20 93 1e 01 	sts	0x011E, r18
		OCR1B =255-duty;
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	82 1b       	sub	r24, r18
 7b2:	91 09       	sbc	r25, r1
 7b4:	99 bd       	out	0x29, r25	; 41
 7b6:	88 bd       	out	0x28, r24	; 40
		if(I_right < (-I_CAP)) I_right = -I_CAP;
		newSpeed = (P_GAIN*error)/1000 + (I_GAIN*I_right)/1000 + (D_GAIN*(error-lasterror_right))/1000 + (int16_t)getMotorDuty(RIGHT_MOTOR);
		if(newSpeed < 0) newSpeed = 0;
		if(newSpeed > 255) newSpeed = 255;
		setMotorDuty(RIGHT_MOTOR, (uint8_t)newSpeed);
		lasterror_right = error;
 7b8:	80 91 17 01 	lds	r24, 0x0117
 7bc:	90 91 18 01 	lds	r25, 0x0118
 7c0:	a0 91 19 01 	lds	r26, 0x0119
 7c4:	b0 91 1a 01 	lds	r27, 0x011A
 7c8:	80 93 8d 00 	sts	0x008D, r24
 7cc:	90 93 8e 00 	sts	0x008E, r25
 7d0:	a0 93 8f 00 	sts	0x008F, r26
 7d4:	b0 93 90 00 	sts	0x0090, r27
	}
	return;
}
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	df 90       	pop	r13
 7e2:	cf 90       	pop	r12
 7e4:	bf 90       	pop	r11
 7e6:	af 90       	pop	r10
 7e8:	9f 90       	pop	r9
 7ea:	8f 90       	pop	r8
 7ec:	7f 90       	pop	r7
 7ee:	6f 90       	pop	r6
 7f0:	5f 90       	pop	r5
 7f2:	4f 90       	pop	r4
 7f4:	08 95       	ret

000007f6 <updateSpeed>:

//function that updates speed
void updateSpeed(void){
	if(!doUpdate) return;
 7f6:	80 91 70 00 	lds	r24, 0x0070
 7fa:	88 23       	and	r24, r24
 7fc:	a1 f1       	breq	.+104    	; 0x866 <__stack+0x7>
	doUpdate = 0;
 7fe:	10 92 70 00 	sts	0x0070, r1
	uint16_t speed16r = 10*ticks_right;
 802:	80 91 76 00 	lds	r24, 0x0076
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	9c 01       	movw	r18, r24
 80a:	22 0f       	add	r18, r18
 80c:	33 1f       	adc	r19, r19
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	28 0f       	add	r18, r24
 81c:	39 1f       	adc	r19, r25
 81e:	82 2f       	mov	r24, r18
 820:	93 2f       	mov	r25, r19
	uint16_t speed16l = 10*ticks_left;
 822:	40 91 87 00 	lds	r20, 0x0087
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	ba 01       	movw	r22, r20
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	44 0f       	add	r20, r20
 830:	55 1f       	adc	r21, r21
 832:	44 0f       	add	r20, r20
 834:	55 1f       	adc	r21, r21
 836:	44 0f       	add	r20, r20
 838:	55 1f       	adc	r21, r21
 83a:	46 0f       	add	r20, r22
 83c:	57 1f       	adc	r21, r23
	ticks_right = 0;
 83e:	10 92 76 00 	sts	0x0076, r1
	ticks_left = 0;
 842:	10 92 87 00 	sts	0x0087, r1
	speed_left = (speed16l > 255)?255:(uint8_t)speed16l;
 846:	4f 3f       	cpi	r20, 0xFF	; 255
 848:	51 05       	cpc	r21, r1
 84a:	11 f0       	breq	.+4      	; 0x850 <updateSpeed+0x5a>
 84c:	08 f0       	brcs	.+2      	; 0x850 <updateSpeed+0x5a>
 84e:	4f ef       	ldi	r20, 0xFF	; 255
 850:	40 93 86 00 	sts	0x0086, r20
	speed_right = (speed16r > 255)?255:(uint8_t)speed16r;
 854:	8f 3f       	cpi	r24, 0xFF	; 255
 856:	91 05       	cpc	r25, r1
 858:	11 f0       	breq	.+4      	; 0x85e <updateSpeed+0x68>
 85a:	08 f0       	brcs	.+2      	; 0x85e <updateSpeed+0x68>
 85c:	2f ef       	ldi	r18, 0xFF	; 255
 85e:	20 93 75 00 	sts	0x0075, r18
	doPID();
 862:	0e 94 1e 02 	call	0x43c	; 0x43c <doPID>
 866:	08 95       	ret

00000868 <__vector_1>:
}

//interrupt handlers for external interrupts (get angle readings from motors)
ISR(INT0_vect){ //right motor
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
	uint8_t sreg_save = SREG;
 88a:	3f b7       	in	r19, 0x3f	; 63
	cli();
 88c:	f8 94       	cli
	uint8_t current_value = TCNT0;
 88e:	22 b7       	in	r18, 0x32	; 50
	if(PIND & 0b00000100){ //just went HIGH
 890:	82 9b       	sbis	0x10, 2	; 16
 892:	39 c0       	rjmp	.+114    	; 0x906 <__vector_1+0x9e>
		uint8_t temp = intref_right[1]-intref_right[0];
 894:	80 91 1c 01 	lds	r24, 0x011C
 898:	90 91 1b 01 	lds	r25, 0x011B
 89c:	68 2f       	mov	r22, r24
 89e:	69 1b       	sub	r22, r25
		uint8_t temp2 = current_value-intref_right[1];
		uint16_t temp4 = temp2+temp;
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	96 2f       	mov	r25, r22
	uint8_t sreg_save = SREG;
	cli();
	uint8_t current_value = TCNT0;
	if(PIND & 0b00000100){ //just went HIGH
		uint8_t temp = intref_right[1]-intref_right[0];
		uint8_t temp2 = current_value-intref_right[1];
 8a4:	42 2f       	mov	r20, r18
 8a6:	48 1b       	sub	r20, r24
		uint16_t temp4 = temp2+temp;
 8a8:	64 0f       	add	r22, r20
 8aa:	71 1d       	adc	r23, r1
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	0e 94 14 05 	call	0xa28	; 0xa28 <__udivmodhi4>
 8b2:	86 2f       	mov	r24, r22
 8b4:	97 2f       	mov	r25, r23
		if(do_ticks){
 8b6:	40 91 85 00 	lds	r20, 0x0085
 8ba:	44 23       	and	r20, r20
 8bc:	79 f0       	breq	.+30     	; 0x8dc <__vector_1+0x74>
			if(temp3 < 170 && lastangle_right > 170) ticks_right++;
 8be:	8a 3a       	cpi	r24, 0xAA	; 170
 8c0:	91 05       	cpc	r25, r1
 8c2:	60 f4       	brcc	.+24     	; 0x8dc <__vector_1+0x74>
 8c4:	80 91 1f 01 	lds	r24, 0x011F
 8c8:	90 91 20 01 	lds	r25, 0x0120
 8cc:	8b 3a       	cpi	r24, 0xAB	; 171
 8ce:	91 05       	cpc	r25, r1
 8d0:	28 f0       	brcs	.+10     	; 0x8dc <__vector_1+0x74>
 8d2:	80 91 76 00 	lds	r24, 0x0076
 8d6:	8f 5f       	subi	r24, 0xFF	; 255
 8d8:	80 93 76 00 	sts	0x0076, r24
		}
		lastangle_right = temp3;
 8dc:	60 93 1f 01 	sts	0x011F, r22
 8e0:	70 93 20 01 	sts	0x0120, r23
		#ifdef STORE_ANGLES
		angles_right[i_angles_right%NUM_STORE_ANGLES] = lastangle_right;
 8e4:	80 91 8c 00 	lds	r24, 0x008C
 8e8:	e8 2f       	mov	r30, r24
 8ea:	ef 71       	andi	r30, 0x1F	; 31
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	ee 0f       	add	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	e9 52       	subi	r30, 0x29	; 41
 8f4:	ff 4f       	sbci	r31, 0xFF	; 255
 8f6:	60 83       	st	Z, r22
 8f8:	71 83       	std	Z+1, r23	; 0x01
		i_angles_right++;
 8fa:	8f 5f       	subi	r24, 0xFF	; 255
 8fc:	80 93 8c 00 	sts	0x008C, r24
		#endif
		intref_right[0] = current_value;
 900:	20 93 1b 01 	sts	0x011B, r18
 904:	02 c0       	rjmp	.+4      	; 0x90a <__vector_1+0xa2>
	}
	else{ //just went LOW
		intref_right[1] = current_value;
 906:	20 93 1c 01 	sts	0x011C, r18
	}
	SREG = sreg_save;
 90a:	3f bf       	out	0x3f, r19	; 63
}
 90c:	ff 91       	pop	r31
 90e:	ef 91       	pop	r30
 910:	bf 91       	pop	r27
 912:	af 91       	pop	r26
 914:	9f 91       	pop	r25
 916:	8f 91       	pop	r24
 918:	7f 91       	pop	r23
 91a:	6f 91       	pop	r22
 91c:	5f 91       	pop	r21
 91e:	4f 91       	pop	r20
 920:	3f 91       	pop	r19
 922:	2f 91       	pop	r18
 924:	0f 90       	pop	r0
 926:	0f be       	out	0x3f, r0	; 63
 928:	0f 90       	pop	r0
 92a:	1f 90       	pop	r1
 92c:	18 95       	reti

0000092e <__vector_2>:
ISR(INT1_vect){ //left motor
 92e:	1f 92       	push	r1
 930:	0f 92       	push	r0
 932:	0f b6       	in	r0, 0x3f	; 63
 934:	0f 92       	push	r0
 936:	11 24       	eor	r1, r1
 938:	2f 93       	push	r18
 93a:	3f 93       	push	r19
 93c:	4f 93       	push	r20
 93e:	5f 93       	push	r21
 940:	6f 93       	push	r22
 942:	7f 93       	push	r23
 944:	8f 93       	push	r24
 946:	9f 93       	push	r25
 948:	af 93       	push	r26
 94a:	bf 93       	push	r27
 94c:	ef 93       	push	r30
 94e:	ff 93       	push	r31
	uint8_t sreg_save = SREG;
 950:	3f b7       	in	r19, 0x3f	; 63
	cli();
 952:	f8 94       	cli
	uint8_t current_value = TCNT0;
 954:	22 b7       	in	r18, 0x32	; 50
	if(PIND & 0b00001000){ //just went HIGH
 956:	83 9b       	sbis	0x10, 3	; 16
 958:	39 c0       	rjmp	.+114    	; 0x9cc <__vector_2+0x9e>
		uint8_t temp = intref_left[1]-intref_left[0];
 95a:	80 91 8a 00 	lds	r24, 0x008A
 95e:	90 91 89 00 	lds	r25, 0x0089
 962:	68 2f       	mov	r22, r24
 964:	69 1b       	sub	r22, r25
		uint8_t temp2 = current_value-intref_left[1];
		uint16_t temp4 = temp2+temp;
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	96 2f       	mov	r25, r22
	uint8_t sreg_save = SREG;
	cli();
	uint8_t current_value = TCNT0;
	if(PIND & 0b00001000){ //just went HIGH
		uint8_t temp = intref_left[1]-intref_left[0];
		uint8_t temp2 = current_value-intref_left[1];
 96a:	42 2f       	mov	r20, r18
 96c:	48 1b       	sub	r20, r24
		uint16_t temp4 = temp2+temp;
 96e:	64 0f       	add	r22, r20
 970:	71 1d       	adc	r23, r1
		uint16_t temp3 = ((uint16_t)temp<<8)/(uint16_t)temp4; //angle
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	0e 94 14 05 	call	0xa28	; 0xa28 <__udivmodhi4>
 978:	86 2f       	mov	r24, r22
 97a:	97 2f       	mov	r25, r23
		if(do_ticks){
 97c:	40 91 85 00 	lds	r20, 0x0085
 980:	44 23       	and	r20, r20
 982:	79 f0       	breq	.+30     	; 0x9a2 <__vector_2+0x74>
			if(temp3 < 170 && lastangle_left > 170) ticks_left++;
 984:	8a 3a       	cpi	r24, 0xAA	; 170
 986:	91 05       	cpc	r25, r1
 988:	60 f4       	brcc	.+24     	; 0x9a2 <__vector_2+0x74>
 98a:	80 91 6e 00 	lds	r24, 0x006E
 98e:	90 91 6f 00 	lds	r25, 0x006F
 992:	8b 3a       	cpi	r24, 0xAB	; 171
 994:	91 05       	cpc	r25, r1
 996:	28 f0       	brcs	.+10     	; 0x9a2 <__vector_2+0x74>
 998:	80 91 87 00 	lds	r24, 0x0087
 99c:	8f 5f       	subi	r24, 0xFF	; 255
 99e:	80 93 87 00 	sts	0x0087, r24
		}
		lastangle_left = temp3;
 9a2:	60 93 6e 00 	sts	0x006E, r22
 9a6:	70 93 6f 00 	sts	0x006F, r23
		#ifdef STORE_ANGLES
		angles_left[i_angles_left%NUM_STORE_ANGLES] = lastangle_left;
 9aa:	80 91 72 00 	lds	r24, 0x0072
 9ae:	e8 2f       	mov	r30, r24
 9b0:	ef 71       	andi	r30, 0x1F	; 31
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	e9 56       	subi	r30, 0x69	; 105
 9ba:	ff 4f       	sbci	r31, 0xFF	; 255
 9bc:	60 83       	st	Z, r22
 9be:	71 83       	std	Z+1, r23	; 0x01
		i_angles_left++;
 9c0:	8f 5f       	subi	r24, 0xFF	; 255
 9c2:	80 93 72 00 	sts	0x0072, r24
		#endif
		intref_left[0] = current_value;
 9c6:	20 93 89 00 	sts	0x0089, r18
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__vector_2+0xa2>
	}
	else{ //just went LOW
		intref_left[1] = current_value;
 9cc:	20 93 8a 00 	sts	0x008A, r18
	}
	SREG = sreg_save;
 9d0:	3f bf       	out	0x3f, r19	; 63
}
 9d2:	ff 91       	pop	r31
 9d4:	ef 91       	pop	r30
 9d6:	bf 91       	pop	r27
 9d8:	af 91       	pop	r26
 9da:	9f 91       	pop	r25
 9dc:	8f 91       	pop	r24
 9de:	7f 91       	pop	r23
 9e0:	6f 91       	pop	r22
 9e2:	5f 91       	pop	r21
 9e4:	4f 91       	pop	r20
 9e6:	3f 91       	pop	r19
 9e8:	2f 91       	pop	r18
 9ea:	0f 90       	pop	r0
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	0f 90       	pop	r0
 9f0:	1f 90       	pop	r1
 9f2:	18 95       	reti

000009f4 <__vector_11>:

//Overflow handler of timer 0 (500Hz)
ISR(TIMER0_OVF_vect){
 9f4:	1f 92       	push	r1
 9f6:	0f 92       	push	r0
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	0f 92       	push	r0
 9fc:	11 24       	eor	r1, r1
 9fe:	8f 93       	push	r24
	if(prescaler) prescaler--;
 a00:	80 91 74 00 	lds	r24, 0x0074
 a04:	88 23       	and	r24, r24
 a06:	21 f0       	breq	.+8      	; 0xa10 <__vector_11+0x1c>
 a08:	81 50       	subi	r24, 0x01	; 1
 a0a:	80 93 74 00 	sts	0x0074, r24
 a0e:	06 c0       	rjmp	.+12     	; 0xa1c <__vector_11+0x28>
	else{
		prescaler = DIV_SPEED_TIMER;
 a10:	88 e2       	ldi	r24, 0x28	; 40
 a12:	80 93 74 00 	sts	0x0074, r24
		doUpdate = 1;
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	80 93 70 00 	sts	0x0070, r24
	}
 a1c:	8f 91       	pop	r24
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <__udivmodhi4>:
 a28:	aa 1b       	sub	r26, r26
 a2a:	bb 1b       	sub	r27, r27
 a2c:	51 e1       	ldi	r21, 0x11	; 17
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <__udivmodhi4_ep>

00000a30 <__udivmodhi4_loop>:
 a30:	aa 1f       	adc	r26, r26
 a32:	bb 1f       	adc	r27, r27
 a34:	a6 17       	cp	r26, r22
 a36:	b7 07       	cpc	r27, r23
 a38:	10 f0       	brcs	.+4      	; 0xa3e <__udivmodhi4_ep>
 a3a:	a6 1b       	sub	r26, r22
 a3c:	b7 0b       	sbc	r27, r23

00000a3e <__udivmodhi4_ep>:
 a3e:	88 1f       	adc	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	5a 95       	dec	r21
 a44:	a9 f7       	brne	.-22     	; 0xa30 <__udivmodhi4_loop>
 a46:	80 95       	com	r24
 a48:	90 95       	com	r25
 a4a:	bc 01       	movw	r22, r24
 a4c:	cd 01       	movw	r24, r26
 a4e:	08 95       	ret

00000a50 <__divmodsi4>:
 a50:	05 2e       	mov	r0, r21
 a52:	97 fb       	bst	r25, 7
 a54:	1e f4       	brtc	.+6      	; 0xa5c <__divmodsi4+0xc>
 a56:	00 94       	com	r0
 a58:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__negsi2>
 a5c:	57 fd       	sbrc	r21, 7
 a5e:	07 d0       	rcall	.+14     	; 0xa6e <__divmodsi4_neg2>
 a60:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__udivmodsi4>
 a64:	07 fc       	sbrc	r0, 7
 a66:	03 d0       	rcall	.+6      	; 0xa6e <__divmodsi4_neg2>
 a68:	4e f4       	brtc	.+18     	; 0xa7c <__divmodsi4_exit>
 a6a:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__negsi2>

00000a6e <__divmodsi4_neg2>:
 a6e:	50 95       	com	r21
 a70:	40 95       	com	r20
 a72:	30 95       	com	r19
 a74:	21 95       	neg	r18
 a76:	3f 4f       	sbci	r19, 0xFF	; 255
 a78:	4f 4f       	sbci	r20, 0xFF	; 255
 a7a:	5f 4f       	sbci	r21, 0xFF	; 255

00000a7c <__divmodsi4_exit>:
 a7c:	08 95       	ret

00000a7e <__negsi2>:
 a7e:	90 95       	com	r25
 a80:	80 95       	com	r24
 a82:	70 95       	com	r23
 a84:	61 95       	neg	r22
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	08 95       	ret

00000a8e <__muluhisi3>:
 a8e:	0e 94 74 05 	call	0xae8	; 0xae8 <__umulhisi3>
 a92:	a5 9f       	mul	r26, r21
 a94:	90 0d       	add	r25, r0
 a96:	b4 9f       	mul	r27, r20
 a98:	90 0d       	add	r25, r0
 a9a:	a4 9f       	mul	r26, r20
 a9c:	80 0d       	add	r24, r0
 a9e:	91 1d       	adc	r25, r1
 aa0:	11 24       	eor	r1, r1
 aa2:	08 95       	ret

00000aa4 <__udivmodsi4>:
 aa4:	a1 e2       	ldi	r26, 0x21	; 33
 aa6:	1a 2e       	mov	r1, r26
 aa8:	aa 1b       	sub	r26, r26
 aaa:	bb 1b       	sub	r27, r27
 aac:	fd 01       	movw	r30, r26
 aae:	0d c0       	rjmp	.+26     	; 0xaca <__udivmodsi4_ep>

00000ab0 <__udivmodsi4_loop>:
 ab0:	aa 1f       	adc	r26, r26
 ab2:	bb 1f       	adc	r27, r27
 ab4:	ee 1f       	adc	r30, r30
 ab6:	ff 1f       	adc	r31, r31
 ab8:	a2 17       	cp	r26, r18
 aba:	b3 07       	cpc	r27, r19
 abc:	e4 07       	cpc	r30, r20
 abe:	f5 07       	cpc	r31, r21
 ac0:	20 f0       	brcs	.+8      	; 0xaca <__udivmodsi4_ep>
 ac2:	a2 1b       	sub	r26, r18
 ac4:	b3 0b       	sbc	r27, r19
 ac6:	e4 0b       	sbc	r30, r20
 ac8:	f5 0b       	sbc	r31, r21

00000aca <__udivmodsi4_ep>:
 aca:	66 1f       	adc	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	1a 94       	dec	r1
 ad4:	69 f7       	brne	.-38     	; 0xab0 <__udivmodsi4_loop>
 ad6:	60 95       	com	r22
 ad8:	70 95       	com	r23
 ada:	80 95       	com	r24
 adc:	90 95       	com	r25
 ade:	9b 01       	movw	r18, r22
 ae0:	ac 01       	movw	r20, r24
 ae2:	bd 01       	movw	r22, r26
 ae4:	cf 01       	movw	r24, r30
 ae6:	08 95       	ret

00000ae8 <__umulhisi3>:
 ae8:	a2 9f       	mul	r26, r18
 aea:	b0 01       	movw	r22, r0
 aec:	b3 9f       	mul	r27, r19
 aee:	c0 01       	movw	r24, r0
 af0:	a3 9f       	mul	r26, r19
 af2:	70 0d       	add	r23, r0
 af4:	81 1d       	adc	r24, r1
 af6:	11 24       	eor	r1, r1
 af8:	91 1d       	adc	r25, r1
 afa:	b2 9f       	mul	r27, r18
 afc:	70 0d       	add	r23, r0
 afe:	81 1d       	adc	r24, r1
 b00:	11 24       	eor	r1, r1
 b02:	91 1d       	adc	r25, r1
 b04:	08 95       	ret

00000b06 <_exit>:
 b06:	f8 94       	cli

00000b08 <__stop_program>:
 b08:	ff cf       	rjmp	.-2      	; 0xb08 <__stop_program>
