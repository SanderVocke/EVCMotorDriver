
EVCMotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000211  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fd  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000104  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c6  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003a  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init>:
	//Init I/O pins
	
	/* Port A:
	- pins 0 and 1: direction outputs to motor controller (CW/CCW).
	*/
	DDRA |= 0b00000011;
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8a bb       	out	0x1a, r24	; 26
	
	/* Port D:
	- pins 4 and 5: PWM outputs to motor controller.
	*/
	DDRD |= 0b00110000;
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 63       	ori	r24, 0x30	; 48
  76:	81 bb       	out	0x11, r24	; 17
}

void setMotorDuty(motor_t motor, uint8_t duty){
	switch(motor){
		case LEFT_MOTOR:
		OCR1A = 255-duty;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	9b bd       	out	0x2b, r25	; 43
  7e:	8a bd       	out	0x2a, r24	; 42
		break;
		case RIGHT_MOTOR:
		OCR1B = 255-duty;
  80:	99 bd       	out	0x29, r25	; 41
  82:	88 bd       	out	0x28, r24	; 40
}

void setMotorDirection(motor_t motor, direction_t direction){
	switch(motor){
		case LEFT_MOTOR:
		if(direction==FORWARD) PORTA |= 0b00000001;
  84:	d8 9a       	sbi	0x1b, 0	; 27
		else PORTA &= 0b11111110;
		break;
		case RIGHT_MOTOR:
		if(direction==FORWARD) PORTA &= 0b11111101;
  86:	d9 98       	cbi	0x1b, 1	; 27
	setMotorDirection(LEFT_MOTOR, FORWARD);
	setMotorDirection(RIGHT_MOTOR, FORWARD);
	
	//Init Timers	
	//Timer/Counter1: For 100kHz PWM to motor driver.
	TCCR1A = 0b11110001; //Fast PWM mode, inverting
  88:	81 ef       	ldi	r24, 0xF1	; 241
  8a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001001; //Fast PWM mode, system clock source	
  8c:	89 e0       	ldi	r24, 0x09	; 9
  8e:	8e bd       	out	0x2e, r24	; 46
  90:	08 95       	ret

00000092 <main>:
void setMotorDirection(motor_t motor, direction_t direction);
void init(void);

int main(void)
{
	init();
  92:	0e 94 36 00 	call	0x6c	; 0x6c <init>
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x4>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
